% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_model.R
\name{run_model}
\alias{run_model}
\title{Estimate mobility flows based on different trip distribution models}
\usage{
run_model(
  proba,
  model = "UM",
  nb_trips = 1000,
  out_trips = NULL,
  in_trips = out_trips,
  nbrep = 3,
  check_names = FALSE
)
}
\arguments{
\item{proba}{a squared matrix of probability. The sum of the matrix element
must be equal to 1. It will be normalized automatically if it is not the
case.}

\item{model}{a character indicating which model to use.}

\item{nb_trips}{an integer indicating the total number of trips.}

\item{out_trips}{a vector of integers representing the number of outgoing
trips per location.}

\item{in_trips}{a vector of integers representing the number of incoming
trips per location.}

\item{nbrep}{an integer indicating the number of replications
associated to the model run.}

\item{check_names}{a boolean indicating if the ID location are used as
vector names, matrix rownames and colnames and if they should be checked
(see Note).}
}
\value{
An object of class \code{TDLM}. A list of list of matrix containing for each
parameter value the \code{nbrep} simulated matrices . If \code{length(param) == 1} or
\code{law == "Rad"} or \verb{law == "Unif} only a list of matrix will be returned.
}
\description{
This function estimates mobility flows using different distribution laws and
models. As described in \insertCite{Lenormand2016}{TDLM}, the function
uses a two-step approach to generate mobility flows by separating the trip
distribution law, gravity or intervening opportunities, from the modeling
approach used to generate the flows from this law.  This function only uses
the second step to generate mobility flow based on a matrix of probability
using different models.
}
\details{
\loadmathjax

We propose four constrained models to generate the flow from the matrix
of probability. These models respect different level of
constraints. These constraints can preserve the total number of trips
(argument \code{nb_trips}) OR the number of out-going trips
\mjeqn{O_{i}}{O_{i}} (argument \code{out_trips}) AND/OR the number of in-coming
\mjeqn{D_{j}}{D_{j}} (argument \code{in_trips}) according to the model. The sum of
out-going trips \mjeqn{\sum_{i} O_{i}}{\sum_{i} O_{i}} should be equal to the
sum of in-coming trips \mjeqn{\sum_{j} D_{j}}{\sum_{j} D_{j}}.
\enumerate{
\item Unconstrained model (\code{model = "UM"}). Only \code{nb_trips} will be preserved
(arguments \code{out_trips} and \code{in_trips} will not be used).
\item Production constrained model (\code{model = "PCM"}). Only \code{out_trips} will be
preserved (arguments \code{nb_trips} and \code{in_trips} will not be used).
\item Attraction constrained model (\code{model = "ACM"}). Only \code{in_trips} will be
preserved (arguments \code{nb_trips} and \code{out_trips} will not be used).
\item Doubly constrained model (\code{model = "DCM"}). Both \code{out_trips} and
\code{in_trips} will be preserved (arguments \code{nb_trips}will not be used).
}
}
\note{
All the inputs should be based on the same number of
locations sorted in the same order. It is recommended to use the location ID
as vector names, matrix rownames and matrix colnames and to set
\code{check_names = TRUE} to verify that everything is in order before running
this function (\code{check_names = FALSE} by default). Note that the function
\code{\link[=check_format_names]{check_format_names()}} can be used to control the validity of all the inputs
before running the main package's functions.
}
\examples{
data(mass)
data(distance)
ind <- sample(dim(distance)[1], 100)

}
\references{
\insertRef{Lenormand2016}{TDLM}
}
\seealso{
\code{\link[=gof]{gof()}} \code{\link[=run_law_model]{run_law_model()}} \code{\link[=run_law]{run_law()}} \code{\link[=check_format_names]{check_format_names()}}
}
\author{
Maxime Lenormand (\email{maxime.lenormand@inrae.fr})
}
