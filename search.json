[{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorial for TDLM","text":"tutorial aims describing different features R package TDLM. main purpose TDLM’s package propose rigorous framework fairly compare trip distribution laws models (Lenormand, Bassolas, Ramasco 2016). general framework based two-step approach generate mobility flows separating trip distribution law, gravity intervening opportunities, modeling approach used generate flows law.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"a-short-note-on-terminology","dir":"Articles","previous_headings":"","what":"A short note on terminology","title":"Tutorial for TDLM","text":"framework part four-step travel model. corresponds second step, called trip distribution, aim match trip origins trip destinations. model used generate trips flows, generally degree interaction different locations, often called spatial interaction models. According research area, matrix network formalism can used describe spatial interactions. Origin-Destination matrix (trip table) often used geography transportation statistical physics study complex systems term mobility networks usually preferred.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"origindestination-matrix","dir":"Articles","previous_headings":"","what":"Origin–Destination matrix","title":"Tutorial for TDLM","text":"description movements certain area represented Origin-Destination matrix (OD matrix). area interest divided \\(n\\) locations \\(T_{ij}\\) represents volume flows location \\(\\) location \\(j\\). volume usually represents number trips commuting flow (.e. number individuals living \\(\\) working \\(j\\)). OD matrix squared, contains positive values can zero-diagonal matrix (Figure 1).","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"aggregated-inputs-information","dir":"Articles","previous_headings":"","what":"Aggregated inputs information","title":"Tutorial for TDLM","text":"Three categories inputs usually considered simulate OD matrix (Figure 2). masses distances main ingredients used generate matrix probabilities based given distribution law. Hence, probability \\(p_{ij}\\) observe trip location \\(\\) another location \\(j\\) based masses, demand origin (\\(m_i\\)) offer destination (\\(m_j\\)). Typically, population used surrogate demand offer. probability movements also depends costs based distance \\(d_{ij}\\) locations number opportunities \\(s_{ij}\\) locations depending chosen law (details next “Trip distribution laws” section). general effect cost can adjusted parameter. margins used generate OD matrix based matrix probabilities preserving total number trips (\\(N\\)), number -going trips (\\(O_i\\)) /number -coming trips (\\(D_j\\)) (details “Contrained distribution models” section).","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"trip-distribution-laws","dir":"Articles","previous_headings":"","what":"Trip distribution laws","title":"Tutorial for TDLM","text":"purpose trip distribution law estimate probability \\(p_{ij}\\) possible travels system one location \\(\\) location \\(j\\). probability asymmetric \\(\\) \\(j\\) flows . takes form squared matrix probabilities. probability normalized possible couples origins destinations, \\(\\sum_{,j=1}^n p_{ij} =1\\). Hence, matrix probabilities can obtained normalizing OD matrix (Figure 3).  mentioned previous section, trip distribution law depends demand origin (\\(m_i\\)), offer destination (\\(m_j\\)) cost move \\(\\) \\(j\\). two major approaches estimation matrix probability. traditional gravity approach, analogy Newton’s law gravitation, based assumption amount trips two locations related populations decays function distance \\(d_{ij}\\) locations. contrast gravity law, laws intervening opportunities hinges assumption number opportunities \\(s_{ij}\\) locations plays important role distance (Lenormand, Bassolas, Ramasco 2016). fundamental difference two schools thought illustrated Figure 4.  important note effect cost locations (distance number opportunities) can usually adjusted parameter can calibrated automatically comparing simulated matrix observed data (details example based real commuting data Kansas ).","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"constrained-distribution-models","dir":"Articles","previous_headings":"","what":"Constrained distribution models","title":"Tutorial for TDLM","text":"purpose trip distribution models generate OD matrix \\(\\tilde{T}=(\\tilde{T}_{ij})\\) drawing random \\(N\\) trips trip distribution law \\((p_{ij})_{1 \\leq ,j \\leq n}\\) respecting different level constraints according model. considered four different types models package. can observed Figure 5, four models respect different level constraints total number trips total number -going -coming trips locations (.e. margins).  specifically, volume flows \\(\\tilde{T}_{ij}\\) generated matrix probability multinomial random draws take different forms according model used (Lenormand, Bassolas, Ramasco 2016). Therefore, since process stochastic, simulated matrix unique composed integers. Note also possible generate average matrix multinomial trials.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"goodness-of-fit-measures","dir":"Articles","previous_headings":"","what":"Goodness-of-fit measures","title":"Tutorial for TDLM","text":"Finally, trip distribution laws can calibrated trip distribution laws models can evaluated comparing simulated matrix \\(\\tilde{T}\\) observed one \\(T\\). comparison based different goodness--fit measures can take accounts distance location (details example based real commuting data Kansas ).","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"data","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Data","title":"Tutorial for TDLM","text":"example, use commuting data US Kansas 2000 illustrate main package’s functions. dataset composed three tables spatial object providing information commuting flows 105 US Kansas counties 200. observed OD matrix od zero-diagonal squared matrix integers. element matrix represents number commuters pair US Kansas counties. aggregated data composed distance matrix, masses margins contained data.frame mass. Finally, county spatial object containing geometry 105 US Kansas counties 2000.  data must always based number locations sorted order. function check_format_names can used control validity inputs running main package’s functions.","code":"data(od)  od[1:10, 1:10] ##       20001 20003 20005 20007 20009 20011 20013 20015 20017 20019 ## 20001     0    71     0     0     0    73     0     8     0     0 ## 20003   236     0     0     0     0    19     0     0     0     0 ## 20005     0     0     0     0     0     0   195     0     0     0 ## 20007     0     0     0     0     8     0     0     0     0     0 ## 20009     0     0     0    11     0     0     0     1     0     0 ## 20011   116    11     0     0     0     0     0     7     0     0 ## 20013    14     0   162     0     0     0     0     0     0     0 ## 20015     0     0     0     0     0     0     0     0     2     3 ## 20017     0     0     0     0     5     0     0    28     0     0 ## 20019     0     0     0     0     0     0     0    15     0     0 dim(od) ## [1] 105 105 data(distance)  distance[1:10, 1:10] ##           20001     20003     20005    20007    20009     20011     20013 ## 20001   0.00000  36.50943 182.92913 306.8503 308.8995  39.80310 216.86309 ## 20003  36.50943   0.00000 146.43350 317.5593 303.2348  55.70229 180.68407 ## 20005 182.92913 146.43350   0.00000 389.5330 319.5319 190.61409  39.16442 ## 20007 306.85034 317.55926 389.53300   0.0000 139.0661 345.02113 396.08680 ## 20009 308.89947 303.23478 319.53188 139.0661   0.0000 348.30350 313.18189 ## 20011  39.80310  55.70229 190.61409 345.0211 348.3035   0.00000 227.63541 ## 20013 216.86309 180.68407  39.16442 396.0868 313.1819 227.63541   0.00000 ## 20015 135.45964 143.66094 235.33947 173.8984 184.6661 174.86577 252.67660 ## 20017 122.13915 113.90701 175.91511 218.9859 189.3766 160.48402 191.29570 ## 20019 116.64897 144.89730 276.87712 216.1297 265.3289 145.90037 303.26803 ##           20015     20017     20019 ## 20001 135.45964 122.13915 116.64897 ## 20003 143.66094 113.90701 144.89730 ## 20005 235.33947 175.91511 276.87712 ## 20007 173.89836 218.98595 216.12968 ## 20009 184.66612 189.37664 265.32892 ## 20011 174.86577 160.48402 145.90037 ## 20013 252.67660 191.29570 303.26803 ## 20015   0.00000  61.72259  87.53437 ## 20017  61.72259   0.00000 131.62896 ## 20019  87.53437 131.62896   0.00000 dim(distance) ## [1] 105 105 data(mass)  mass[1:10,] ##       Population Out-commuters In-commuters ## 20001      14385          1267         1343 ## 20003       8110          1346          361 ## 20005      16774          1065         1247 ## 20007       5307           260          201 ## 20009      28205          1129         1324 ## 20011      15379           662          761 ## 20013      10724          1148          984 ## 20015      59482         14182         3579 ## 20017       3030           681           93 ## 20019       4359           486          180 dim(mass) ## [1] 105   3 mi <- as.numeric(mass[,1]) names(mi) <- rownames(mass)  mj <- mi  Oi <- as.numeric(mass[,2]) names(Oi) <- rownames(mass)  Dj <- as.numeric(mass[,3]) names(Dj) <- rownames(mass) data(county)  county[1:10,] ## Simple feature collection with 10 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: -99.0334 ymin: 36.99796 xmax: -94.6139 ymax: 40.0006 ## Geodetic CRS:  WGS 84 ##         ID Longitude Latitude     Area                       geometry ## 1016 20001 -95.30137 37.88581 1307.667 MULTIPOLYGON (((-95.08805 3... ## 983  20003 -95.29334 38.21429 1512.337 MULTIPOLYGON (((-95.07771 3... ## 869  20005 -95.31288 39.53194 1125.682 MULTIPOLYGON (((-95.56751 3... ## 1064 20007 -98.68482 37.22888 2941.524 MULTIPOLYGON (((-98.52686 3... ## 962  20009 -98.75650 38.47904 2330.541 MULTIPOLYGON (((-99.03239 3... ## 1017 20011 -94.84928 37.85522 1653.609 MULTIPOLYGON (((-94.61413 3... ## 843  20013 -95.56416 39.82657 1480.469 MULTIPOLYGON (((-95.77332 3... ## 1011 20015 -96.83911 37.78125 3744.168 MULTIPOLYGON (((-96.52571 3... ## 974  20017 -96.59395 38.30205 2013.697 MULTIPOLYGON (((-96.81972 3... ## 1079 20019 -96.24535 37.15007 1669.418 MULTIPOLYGON (((-96.52495 3... plot(county) check_format_names(vectors = list(mi = mi, mj = mj, Oi = Oi, Dj = Dj),                    matrices = list(od = od, distance = distance),                    check = \"format_and_names\") ## The inputs passed the format_and_names checks successfully!"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"extract-additional-spatial-information","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Extract additional spatial information","title":"Tutorial for TDLM","text":"functions extract_spatial_information extract_opportunities can used extract matrices distances number intervening opportunities, respectively. first function takes input spatial object containing geometry locations can handled sf package. returns matrix great-circle distances locations (express km). optional id can also provided used names outputs. function allows also extract number surface area location (squared kilometer) can useful calibrate trip distribution laws parameter value (see ). second function computes number opportunities pairs locations. given pair location number opportunities location origin location destination based number opportunities circle radius equal distance origin destination centered origin. number opportunities origin destination included. case, number inhabitants (\\(m_i\\)) used proxy number opportunity.","code":"spi <- extract_spatial_information(county, id = \"ID\")  distance2 <- spi$distance  distance2[1:10, 1:10] ##           20001     20003     20005    20007    20009     20011     20013 ## 20001   0.00000  36.50943 182.92913 306.8503 308.8995  39.80310 216.86309 ## 20003  36.50943   0.00000 146.43350 317.5593 303.2348  55.70229 180.68407 ## 20005 182.92913 146.43350   0.00000 389.5330 319.5319 190.61409  39.16442 ## 20007 306.85034 317.55926 389.53300   0.0000 139.0661 345.02113 396.08680 ## 20009 308.89947 303.23478 319.53188 139.0661   0.0000 348.30350 313.18189 ## 20011  39.80310  55.70229 190.61409 345.0211 348.3035   0.00000 227.63541 ## 20013 216.86309 180.68407  39.16442 396.0868 313.1819 227.63541   0.00000 ## 20015 135.45964 143.66094 235.33947 173.8984 184.6661 174.86577 252.67660 ## 20017 122.13915 113.90701 175.91511 218.9859 189.3766 160.48402 191.29570 ## 20019 116.64897 144.89730 276.87712 216.1297 265.3289 145.90037 303.26803 ##           20015     20017     20019 ## 20001 135.45964 122.13915 116.64897 ## 20003 143.66094 113.90701 144.89730 ## 20005 235.33947 175.91511 276.87712 ## 20007 173.89836 218.98595 216.12968 ## 20009 184.66612 189.37664 265.32892 ## 20011 174.86577 160.48402 145.90037 ## 20013 252.67660 191.29570 303.26803 ## 20015   0.00000  61.72259  87.53437 ## 20017  61.72259   0.00000 131.62896 ## 20019  87.53437 131.62896   0.00000 mean(spi$surface) ## [1] 2028.05 sij <- extract_opportunities(opportunity = mi,                              distance = distance,                              check_names = TRUE) sij[1:10, 1:10] ##         20001   20003   20005   20007   20009   20011   20013   20015   20017 ## 20001       0   16997 1445725 2358187 2363494   28895 2112382 1037999  865098 ## 20003       0       0 1374401 2403828 2354815   89743 1577419 1310560 1219766 ## 20005 1311224 1240896       0 2454129 2346302 1329397   26675 1507244 1308194 ## 20007 1433163 1481954 2489482       0  634786 1761752 2506256  784401 1033184 ## 20009 1778443 1651945 1820549  344665       0 2426105 1792828 1006105 1070707 ## 20011   47812   79194 1390766 2357193 2362500       0 1520832 1288889 1278974 ## 20013 1410286 1302399   18966 2475846 2326406 1436135       0 1501910 1330347 ## 20015  874190  957116 2331868 1272683 1471752 1277990 2390227       0  529702 ## 20017 1108686 1021292 2081327 2408908 2312482 1491593 2340687   63073       0 ## 20019  222857  795722 2320023 1387590 2282995  839767 2400214  116644  759823 ##         20019 ## 20001  409653 ## 20003 1370042 ## 20005 1734928 ## 20007 1025564 ## 20009 1355225 ## 20011 1017627 ## 20013 2285756 ## 20015  575300 ## 20017 1238018 ## 20019       0"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"run-functions","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Run functions","title":"Tutorial for TDLM","text":"main function package run_law_model. function two sets arguments, one law another one model. inputs (described ) necessary run function depends law (either matrix distances number opportunities can used, neither uniform law) model associated constraints (number trips, -going trips /-coming trips). example generate three simulated ODs normalized gravity law exponential distance decay function (Lenormand, Bassolas, Ramasco 2016) Doubly Constrained Model. output object class TDLM. case list matrices composed three simulated matrices (replication_1, replication_2 replication_3), matrix probabilities (called proba) associated law returned write_proba = TRUE. objects class TDLM contain table info summarizing simulation run. simulation run based one parameter value. possible use vector instead scalar param argument. case list list matrices returned (one parameter value). also important note radiation law uniform law free parameter. argument average can used generate average matrix based multinomial distribution (based infinite number drawings). case, models’ inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers. functions run_law run_model designed run one two components two-step approach. function run_law_model, worth noting inter-location flows considered distribution laws, meaning matrix probabilities (associated simulated OD matrices) generated given distribution law run_law_model run_law zero-diagonal matrix. Nevertheless, possible generate intra-location flows run_model taking kind matrix probabilities input.","code":"res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = 0.01,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3) print(res) ##        Argument    Value ## 1           Law NGravExp ## 2         Model      DCM ## 3 #Replications        3 ## 4   #Parameters        1 ## 5     Parameter     0.01 str(res) ## List of 5 ##  $ info         :'data.frame':   5 obs. of  2 variables: ##   ..$ Argument: chr [1:5] \"Law\" \"Model\" \"#Replications\" \"#Parameters\" ... ##   ..$ Value   : chr [1:5] \"NGravExp\" \"DCM\" \"3\" \"1\" ... ##  $ replication_1: num [1:105, 1:105] 0 25 4 0 2 15 4 102 5 6 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ replication_2: num [1:105, 1:105] 0 23 4 0 2 16 4 105 5 6 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ replication_3: num [1:105, 1:105] 0 23 4 0 2 18 4 104 5 6 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ proba        : num [1:105, 1:105] 0 0.0000431 0.0000216 0.0000039 0.0000181 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  - attr(*, \"class\")= chr [1:2] \"TDLM\" \"list\" ##  - attr(*, \"from\")= chr \"run_law_model\" ##  - attr(*, \"proba\")= logi TRUE res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = c(0.01,0.02),                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3) print(res) ##        Argument    Value ## 1           Law NGravExp ## 2         Model      DCM ## 3 #Replications        3 ## 4   #Parameters        2 ## 5   Parameter 1     0.01 ## 6   Parameter 2     0.02 str(res) ## List of 3 ##  $ info       :'data.frame': 6 obs. of  2 variables: ##   ..$ Argument: chr [1:6] \"Law\" \"Model\" \"#Replications\" \"#Parameters\" ... ##   ..$ Value   : chr [1:6] \"NGravExp\" \"DCM\" \"3\" \"2\" ... ##  $ parameter_1:List of 4 ##   ..$ replication_1: num [1:105, 1:105] 0 24 4 0 2 15 4 101 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_2: num [1:105, 1:105] 0 23 4 0 2 17 4 103 5 6 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_3: num [1:105, 1:105] 0 24 5 0 2 15 4 106 5 6 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ proba        : num [1:105, 1:105] 0 0.0000431 0.0000216 0.0000039 0.0000181 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##  $ parameter_2:List of 4 ##   ..$ replication_1: num [1:105, 1:105] 0 53 2 0 0 38 1 76 6 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_2: num [1:105, 1:105] 0 54 2 0 0 39 1 77 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_3: num [1:105, 1:105] 0 53 3 0 0 41 1 78 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ proba        : num [1:105, 1:105] 0 0.00008134 0.00000817 0.00000071 0.00000316 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##  - attr(*, \"class\")= chr [1:2] \"TDLM\" \"list\" ##  - attr(*, \"from\")= chr \"run_law_model\" ##  - attr(*, \"proba\")= logi TRUE res <- run_law_model(law = \"Rad\",                       mass_origin = mi,                       mass_destination = mj,                       distance = NULL,                       opportunity = sij,                      param = NULL,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3)  print(res) ##        Argument Value ## 1           Law   Rad ## 2         Model   DCM ## 3 #Replications     3 res$replication_1[1:10,1:10] ##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ##  [1,]    0   32    0    0    0  121    0    1    0     0 ##  [2,]  567    0    0    0    0   22    0    0    0     0 ##  [3,]    0    0    0    0    0    0  201    0    0     0 ##  [4,]    0    0    0    0    0    0    0    0    0     0 ##  [5,]    0    0    0    1    0    0    0    3    0     0 ##  [6,]   17    2    0    0    0    0    0    0    0     0 ##  [7,]    1    0  203    0    0    0    0    0    0     0 ##  [8,]    4    1    1    1   10    5    1    0    0     1 ##  [9,]    0    0    0    0    0    0    0   40    0     0 ## [10,]    0    0    0    0    0    0    0   13    0     0 res <- run_law_model(law = \"Rad\",                       mass_origin = mi,                       mass_destination = mj,                       distance = NULL,                       opportunity = sij,                      param = NULL,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = TRUE,                       nbrep = 3)  print(res) ##        Argument       Value ## 1           Law         Rad ## 2         Model         DCM ## 3 #Replications 1 (average) res$replication_1[1:10,1:10] ##                 [,1]          [,2]           [,3]         [,4]          [,5] ##  [1,]   0.0004207454 32.4892400963   0.1629984484 0.0169209490  0.1523725424 ##  [2,] 564.5506262043  0.0006155812   0.1486179899 0.0133929974  0.1262074091 ##  [3,]   0.0817414764  0.0292712785   0.0008564946 0.0180562693  0.1785403044 ##  [4,]   0.0058662196  0.0017627695   0.0054618518 0.0006206272  0.1984250005 ##  [5,]   0.0782494024  0.0290225310   0.2083665031 1.3841229993  0.0007860351 ##  [6,]  17.9451916256  2.8967784258   0.1227317248 0.0118216041  0.1064531228 ##  [7,]   0.0485452869  0.0182507659 200.3665660453 0.0121155517  0.1240133212 ##  [8,]   4.2352873359  1.1508336887   1.8172977346 1.5952317911 10.8700099119 ##  [9,]   0.0170186049  0.0064423969   0.0135802052 0.0027705322  0.0271813599 ## [10,]   0.3657437311  0.0099292591   0.0102994275 0.0078265447  0.0262454199 ##                 [,6]          [,7]         [,8]         [,9]        [,10] ##  [1,] 120.6594436922   0.088300934  1.637304888 0.0120698542 0.0777923728 ##  [2,]  22.6136480366   0.129731164  0.862290746 0.0050699294 0.0060667099 ##  [3,]   0.1934134731 197.362281104  0.918724724 0.0061614808 0.0053164987 ##  [4,]   0.0094693490   0.006169547  0.278155220 0.0008433002 0.0012892865 ##  [5,]   0.1033248806   0.246035174  3.462295645 0.0158169340 0.0150487684 ##  [6,]   0.0005850044   0.118009851  0.752499705 0.0038974570 0.0092130934 ##  [7,]   0.1138611500   0.002549294  0.633540548 0.0040869895 0.0021031775 ##  [8,]   5.0405880365   1.982878523  0.002650424 0.7993806174 1.0370497229 ##  [9,]   0.0229662548   0.012308713 39.049317001 0.0005691793 0.0015470504 ## [10,]   0.0673229364   0.011020886 13.987963900 0.0025478503 0.0002716179"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"parameters-calibration-models-evaluation","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Parameters’ calibration & models’ evaluation","title":"Tutorial for TDLM","text":"package contains two function help calibrating evaluating model. function gof computes goodness--fit measures observed simulated OD matrices function calib_param estimates optimal parameter value given law given spatial distribution location based Figure 8 (Lenormand, Bassolas, Ramasco 2016). Let us illustrate trip distribution laws models’ calibration normalized gravity law exponential distance decay function Doubly Constrained Model. Based average surface area Kansas counties (square kilometers) seems optimal parameter value normalized gravity law exponential distance decay function (described (Lenormand, Bassolas, Ramasco 2016)) commuting US Kansas counties around 0.085. just estimation order ","code":"print(calib_param(av_surf = mean(spi$surface), law = \"NGravExp\")) ## [1] 0.08521097 res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = seq(0.05,0.1,0.005),                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3) calib <- gof(sim = res, obs = od, measures = \"all\", distance = distance)"},{"path":[]},{"path":"https://epivec.github.io/TDLM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxime Lenormand. Author, maintainer.","code":""},{"path":"https://epivec.github.io/TDLM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lenormand M (2023). TDLM: Systematic comparison trip distribution laws models. R package version 0.1.0, https://epivec.github.io/TDLM/.","code":"@Manual{,   title = {TDLM: Systematic comparison of trip distribution laws and models},   author = {Maxime Lenormand},   year = {2023},   note = {R package version 0.1.0},   url = {https://epivec.github.io/TDLM/}, }"},{"path":[]},{"path":[]},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_1-install","dir":"","previous_headings":"","what":"1 Install","title":"Systematic comparison of trip distribution laws and models","text":"package TDLM can installed following command line R session:","code":"# install.packages(\"devtools\") devtools::install_github(\"EpiVec/TDLM\")"},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_2-tutorial","dir":"","previous_headings":"","what":"2 Tutorial","title":"Systematic comparison of trip distribution laws and models","text":"tutorial vignette available .","code":""},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_3-dependencies","dir":"","previous_headings":"","what":"3 Dependencies","title":"Systematic comparison of trip distribution laws and models","text":"TDLM depends Ecume, mathjaxr, Rdpack, readr, rmarkdown sf.","code":""},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_4-citation","dir":"","previous_headings":"","what":"4 Citation","title":"Systematic comparison of trip distribution laws and models","text":"Lenormand M, Bassolas & Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169.","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic calibration of trip distribution laws' parameter — calib_param","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"function returns estimation optimal parameter value based average surface area locations (square kilometer) according law. estimation tested commuting data (kilometer).","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"","code":"calib_param(av_surf, law = \"NGravExp\")"},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"av_surf positive numeric value indicating average surface area locations (square kilometer). law character indicating law use (see Details).","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"estimation optimal parameter value based average surface area locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"estimation based Figure 8 Lenormand et al. (2016)  four types laws. normalized gravity law exponential distance decay function (law = \"NGravExp\"), normalized gravity law power distance decay function (law = \"NGravPow\"), Schneider's intervening opportunities law (law = \"Schneider\") extended radiation law (law = \"RadExt\").","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"","code":"data(county)  res <- extract_spatial_information(county, id = \"ID\") av_surf <- mean(res$surface)  calib_param(av_surf = av_surf, law = \"NGravExp\") #> [1] 0.08521097 calib_param(av_surf = av_surf, law = \"NGravPow\") #> [1] 3.295941 calib_param(av_surf = av_surf, law = \"Schneider\") #> [1] 2.475339e-06 calib_param(av_surf = av_surf, law = \"RadExt\") #> [1] 1.299361"},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check format of TDLM's inputs — check_format_names","title":"Check format of TDLM's inputs — check_format_names","text":"function checks TDLM's inputs required format (names).","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check format of TDLM's inputs — check_format_names","text":"","code":"check_format_names(vectors, matrices = NULL, check = \"format_and_names\")"},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check format of TDLM's inputs — check_format_names","text":"vectors list vectors. list can contain one vector. recommended name element list. vectors = NULL matrices considered. matrices list matrices. list can contain one matrix. recommended name element list. matrices = NULL vectors considered (default). check character indicating types check (\"format\" \"format_and_names\") used (see Details).","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check format of TDLM's inputs — check_format_names","text":"message indicating check passed failed.","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check format of TDLM's inputs — check_format_names","text":"TDLM's inputs based number locations sorted order. check = \"format\" run basic checks ensure structure inputs (dimensions, class, type...) correct. recommended use location ID vector names, matrix rownames matrix colnames. Set check  = \"format_and_names\" check inputs' names. checks run successively, run function many times needed get message indicating inputs passed check successfully.","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check format of TDLM's inputs — check_format_names","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check format of TDLM's inputs — check_format_names","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) names(mi) <- rownames(mass) mj <- mi  check_format_names(   vectors = list(mi = mi, mj = mj),   matrices = list(distance = distance),   check = \"format_and_names\" ) #> The inputs passed the format_and_names checks successfully!"},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial distribution of US Kansas counties in 2000 — county","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"dataset containing geometry 105 US Kansas counties.","code":""},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"","code":"county"},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"ID County ID. Longitude Longitude coordinate centroid county. Latitude Latitude coordinate centroid county. Area Surface area county (square kilometer). geometry Geometry county.","code":""},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"https://www.sciencebase.gov/catalog/item/4f4e4a2ee4b07f02db615738","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Great-circle distances between US Kansas counties — distance","title":"Great-circle distances between US Kansas counties — distance","text":"dataset containing great-circle distance (kilometers) 105 US Kansas counties.","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Great-circle distances between US Kansas counties — distance","text":"","code":"distance"},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Great-circle distances between US Kansas counties — distance","text":"matrix 105 rows 105 columns. element matrix represents distance two counties. County ID rownames colnames.","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Great-circle distances between US Kansas counties — distance","text":"https://www.sciencebase.gov/catalog/item/4f4e4a2ee4b07f02db615738","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of opportunities between pairs of locations — extract_opportunities","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"function computes number opportunities pairs locations defined (Lenormand et al. 2016) . given pair location number opportunities location origin location destination based number opportunities circle radius equal distance origin destination centered origin. number opportunities origin destination included.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"","code":"extract_opportunities(opportunity, distance, check_names = FALSE)"},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"opportunity numeric vector representing number opportunities per location. value positive. distance squared matrix representing distance locations. check_names boolean indicating ID location used vector names, matrix rownames colnames checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"squared matrix element represents number opportunities pair locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"opportunity distance based number locations sorted order. recommended use location ID vector names, matrix rownames matrix colnames set check_names = TRUE verify everything order running function (check_names = FALSE default). Note function check_format_names() can used control validity inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"","code":"data(mass) data(distance)  opportunity <- mass[, 1]  sij <- extract_opportunities(   opportunity = opportunity,   distance = distance,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract distances and surface areas from a spatial object — extract_spatial_information","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"function returns matrix distances locations (kilometer) along vector surface areas locations (square kilometer).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"","code":"extract_spatial_information(geometry, id = NULL, show_progress = FALSE)"},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"geometry spatial object can handled sf package. id name number column use rownames colnames output distance matrix (optional, NULL default). vector length equal number locations can also used. show_progress boolean indicating progress bar displayed.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"list composed two elements. first element squared matrix representing great-circle distance (kilometer) locations. second element vector containing surface area location (squared kilometer).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"geometry must projected valid coordinate reference system. reprojected degrees longitude/latitude compute great-circle distances centroids' locations internal function compute surface area function st_area sf package.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"outputs based locations contained geometry sorted order. optional id can also provided used names outputs.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"","code":"data(county)  res <- extract_spatial_information(county, id = \"ID\")  dim(res$distance) #> [1] 105 105  length(res$surface) #> [1] 105"},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"function returns data.frame row provides one several goodness--fit measures simulated observed Origin-Destination matrix.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"","code":"gof(   sim,   obs,   measures = \"all\",   distance = NULL,   bin_size = 2,   use_proba = FALSE,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"sim object class TDLM (output run_law_model(), run_law() run_model()). matrix list matrices can also used (see Note). obs squared matrix representing observed mobility flows. measures vector string(s) indicating goodness--fit measure(s) chose (see Details). \"\" specified, measures calculated. distance squared matrix representing distance locations. necessary distance-based measures. bin_size numeric value indicating size bin used discretize distance distribution compute CPC_d (2 \"km\" default). use_proba boolean indicating proba matrix used instead simulated OD matrix compute measure(s). valid output run_law_model() argument write_proba = TRUE (see Note). check_names boolean indicating ID location used matrix rownames colnames checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"data.frame providing one several goodness--fit measure(s) simulated OD(s) observed OD. row corresponds matrix sorted according list (list list) elements (names used provided).","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"\\(n\\) number locations, \\(T_{ij}\\) observed flow location \\(\\) location \\(j\\) (argument obs), \\(\\tilde{T}_{ij}\\) simulated flow location \\(\\) location \\(j\\) (matrix argument sim), \\(N=\\sum_{,j=1}^n T_{ij}\\) sum observed flows \\(\\tilde{N}=\\sum_{,j=1}^n \\tilde{T}_{ij}\\) sum simulated flows. Several goodness--fit measures considered measures = c(\"CPC\", \"NRMSE\", \"KL\", \"CPL\", \"CPC_d\", \"KS\"). Common Part Commuters (Gargiulo et al. 2012; Lenormand et al. 2012; Lenormand et al. 2016) , \\(\\displaystyle CPC(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{,j=1}^n min(T_{ij},\\tilde{T}_{ij})}{N + \\tilde{N}}\\) Normalized Root Mean Square Error (NRMSE), \\(\\displaystyle NRMSE(T,\\tilde{T}) = \\sqrt{\\frac{\\sum_{,j=1}^n (T_{ij}-\\tilde{T}_{ij})^2}{N}}\\) Kullback–Leibler divergence (Kullback Leibler 1951) , \\(\\displaystyle KL(T,\\tilde{T}) = \\sum_{,j=1}^n \\frac{T_{ij}}{N}\\log\\left(\\frac{T_{ij}}{N}\\frac{\\tilde{N}}{\\tilde{T}_{ij}}\\right)\\) Common Part Links (CPL) (Lenormand et al. 2016) , \\(\\displaystyle CPL(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{,j=1}^n 1_{T_{ij}>0} \\cdot 1_{\\tilde{T}_{ij}>0}}{\\sum_{,j=1}^n 1_{T_{ij}>0} + \\sum_{,j=1}^n 1_{\\tilde{T}_{ij}>0}}\\) Common Part Commuters based disance (Lenormand et al. 2016) , noted CPC_d. Let us consider \\(N_k\\) (\\(\\tilde{N}_k\\)) sum observed (simulated) flows distance comprised bin [bin_size*k-bin_size, bin_size*k[. \\(\\displaystyle CPC_d(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{k=1}^{\\infty} min(N_{k},\\tilde{N}_{k})}{N+\\tilde{N}}\\) Kolmogorv-Smirnov statistic p-value (Massey 1951)  , noted KS. based observed simulated flow distance distribution computed ks_test function Ecume package.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"default, sim output run_law_model() measure(s) computed simulated OD matrices proba matrix (included output write_proba = TRUE). argument use_proba can used compute measure(s) based proba matrix instead simulated OD matrix. case argument obs also proba matrix. inputs based number locations sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything order running function (check_names = FALSE default). Note function check_format_names() can used control validity inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169. Gargiulo F, Lenormand M, Huet S, Baqueiro Espinosa O (2012). “Commuting network model: getting essentials.” Journal Artificial Societies Social Simulation, 15(2), 13. Lenormand M, Huet S, Gargiulo F, Deffuant G (2012). “Universal Model Commuting Networks.” PLoS ONE, 7, e45985. Kullback S, Leibler RA (1951). “Information Sufficiency.” Annals Mathematical Statistics, 22(1), 79 -- 86. Massey FJ (1951). “Kolmogorov-Smirnov test goodness fit.” Journal American Statistical Association, 46(253), 68--78.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"","code":"data(mass) data(distance) data(od)  mi <- as.numeric(mass[, 1]) mj <- mi Oi <- as.numeric(mass[, 2]) Dj <- as.numeric(mass[, 3])  res <- run_law_model(   law = \"GravExp\", mass_origin = mi, mass_destination = mj,   distance = distance, opportunity = NULL, param = c(0.01, 0.02, 0.03),   model = \"DCM\", nb_trips = NULL, out_trips = Oi, in_trips = Dj,   average = FALSE, nbrep = 3, maxiter = 50, mindiff = 0.01,   write_proba = FALSE,   check_names = FALSE )  gof(   sim = res, obs = od, measures = \"all\", distance = distance, bin_size = 2,   use_proba = FALSE,   check_names = FALSE ) #>     Parameter    Simulation       CPC    NRMSE        KL       CPL     CPC_d #> 1 parameter_1 replication_1 0.4575262 38.93318 0.9381291 0.4258019 0.5144824 #> 2 parameter_1 replication_2 0.4576959 38.88852 0.9369371 0.4257519 0.5145173 #> 3 parameter_2 replication_1 0.6151976 26.26061 0.5032145 0.5240429 0.6688046 #> 4 parameter_2 replication_2 0.6152575 26.31152 0.5033228 0.5244948 0.6686798 #> 5 parameter_3 replication_1 0.7111012 18.71904 0.2973110 0.5958491 0.7725896 #> 6 parameter_3 replication_2 0.7111961 18.71613 0.2972089 0.5956243 0.7725896 #>     KS_stat        KS_pval #> 1 0.4826459 0.000001560205 #> 2 0.4827457 0.000001561199 #> 3 0.3225786 0.008896725240 #> 4 0.3227782 0.008798127827 #> 5 0.2103982 0.244894729703 #> 6 0.2105030 0.244417033142"},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"dataset containing number inhabitants, -commuters -commuters 105 US Kansas counties 2000.","code":""},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"","code":"mass"},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"data.frame 105 rows 3 columns: rownames County ID. Population Number inhabitants. -commuters Number -commuters. -commuters Number -commuters.","code":""},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"https://www2.census.gov/programs-surveys/decennial/tables/2000/county--county-worker-flow-files/","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":null,"dir":"Reference","previous_headings":"","what":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"dataset containing number commuters 105 US Kansas counties 2000.","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"","code":"od"},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"matrix 105 rows 105 columns. element matrix represents number commuters two counties. County ID rownames colnames.","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"https://www2.census.gov/programs-surveys/decennial/tables/2000/county--county-worker-flow-files/","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution laws — run_law","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"function estimates mobility flows using different distribution laws. described (Lenormand et al. 2016) , propose two-step approach generate mobility flows separating trip distribution law, gravity intervening opportunities, modeling approach used generate flows law. function uses first step generate probability distribution based different laws.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"","code":"run_law(   law = \"Unif\",   mass_origin,   mass_destination = mass_origin,   distance = NULL,   opportunity = NULL,   param = NULL,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"law character indicating law use (see Details). mass_origin numeric vector representing mass origin (.e. demand). mass_destination numeric vector representing mass destination (.e. attractiveness). distance squared matrix representing distance locations (see Details). opportunity squared matrix representing number opportunities locations (see Details). Can easily computed extract_opportunities(). param vector numeric value(s) used adjust importance distance opportunity associated chosen law. single value vector several parameter values can used (see Return). necessary original radiation law uniform law (see Details). check_names boolean indicating ID location used vector names, matrix rownames colnames checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"object class TDLM. list list matrices containing parameter value matrix probabilities (called proba). length(param) == 1 law == \"Rad\" law == \"Unif list matrices returned.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"compute matrix proba estimating probability \\(p_{ij}\\) observe trip location \\(\\) another location \\(j\\) (\\(\\sum_{}\\sum_{j} p_{ij}=1\\)). probability based demand \\(m_{}\\) (argument mass_origin) attractiveness \\(m_{j}\\) (argument mass_destination). Note population typically used surrogate quantities (mass_destination = mass_origin default). also depends distance \\(d_{ij}\\) locations (argument distance) number opportunities \\(s_{ij}\\) locations (argument opportunity) depending chosen law. effect distance number opportunities can adjusted parameter (argument param) except original radiation law uniform law. package consider eight probabilistic laws described details Lenormand et al. (2016) . Four gravity laws (Carey 1858; Zipf 1946; Barthelemy 2011; Lenormand et al. 2016) , three intervening opportunity laws (Schneider 1959; Simini et al. 2012; Yang et al. 2014)  uniform law. Gravity law exponential distance decay function (law = \"GravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law exponential distance decay function (law = \"NGravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Gravity law power distance decay function (law = \"GravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law power distance decay function (law = \"NGravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Schneider's intervening opportunities law (law = \"Schneider\"). arguments mass_origin, mass_destination (optional), opportunity param used. Radiation law (law = \"Rad\"). arguments mass_origin, mass_destination (optional) opportunity used. Extended radiation law (law = \"RadExt\"). arguments mass_origin, mass_destination (optional), opportunity param used. Uniform law (law = \"Unif\"). argument mass_origin used extract number locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"inputs based number locations sorted order. recommended use location ID vector names, matrix rownames matrix colnames set check_names = TRUE verify everything order running function (check_names = FALSE default). Note function check_format_names() can used control validity inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169. Carey HC (1858). Principles Social Science. Lippincott. Zipf GK (1946). “P1 P2/D Hypothesis: Intercity Movement Persons.” American Sociological Review, 11(6), 677--686. Barthelemy M (2011). “Spatial Networks.” Physics Reports, 499, 1-101. Schneider M (1959). “Gravity models trip distribution theory.” Papers regional science association, 5, 51-58. Simini F, González MC, Maritan , Barabasi (2012). “universal model mobility migration patterns.” Nature, 484, 96-100. Yang Y, Herrera C, Eagle N, González MC (2014). “Limits Predictability Commuting Flows Absence Data Calibration.” Scientific Reports, 4(5662), 5662.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) mj <- mi  res <- run_law(   law = \"GravExp\", mass_origin = mi, mass_destination = mj,   distance = distance, opportunity = NULL, param = 0.01,   check_names = FALSE )  # print(res)"},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"function estimates mobility flows using different distribution laws models. described Lenormand et al. (2016) , function uses two-step approach generate mobility flows separating trip distribution law, gravity intervening opportunities, modeling approach used generate flows law.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"","code":"run_law_model(   law = \"Unif\",   mass_origin,   mass_destination = mass_origin,   distance = NULL,   opportunity = NULL,   param = NULL,   model = \"UM\",   nb_trips = 1000,   out_trips = NULL,   in_trips = out_trips,   average = FALSE,   nbrep = 3,   maxiter = 50,   mindiff = 0.01,   write_proba = FALSE,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"law character indicating law use (see Details). mass_origin numeric vector representing mass origin (.e. demand). mass_destination numeric vector representing mass destination (.e. attractiveness). distance squared matrix representing distance locations (see Details). opportunity squared matrix representing number opportunities locations (see Details). Can easily computed extract_opportunities(). param vector numeric value(s) used adjust importance distance opportunity associated chosen law. single value vector several parameter values can used (see Return). necessary original radiation law uniform law (see Details). model character indicating model use. nb_trips numeric value indicating total number trips. Must integer average = FALSE (see Details). out_trips numeric vector representing number outgoing trips per location. Must vector integers average = FALSE (see Details). in_trips numeric vector representing number incoming trips per location. Must vector integers average = FALSE (see Details). average boolean indicating average mobility flow matrix generated instead nbrep matrices based random draws (see Details). nbrep integer indicating number replications associated model run. Note nbrep = 1 average = TRUE (see Details). maxiter integer indicating maximal number iterations adjusting Doubly Constrained Model (see Details). mindiff numeric strictly positive value indicating stopping criterion adjusting Doubly Constrained Model (see Details). write_proba boolean indicating estimation probability move one location another obtained distribution law returned along flows estimations. check_names boolean indicating ID location used vector names, matrix rownames colnames checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"object class TDLM. list list matrices containing parameter value nbrep simulated matrices matrix probabilities (called proba) write_proba = TRUE. length(param) == 1 law == \"Rad\" law == \"Unif list matrices returned.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"First, compute matrix proba estimating probability \\(p_{ij}\\) observe trip location \\(\\) another location \\(j\\) (\\(\\sum_{}\\sum_{j} p_{ij}=1\\)). probability based demand \\(m_{}\\) (argument mass_origin) attractiveness \\(m_{j}\\) (argument mass_destination). Note population typically used surrogate quantities (mass_destination = mass_origin default). also depends distance \\(d_{ij}\\) locations (argument distance) number opportunities \\(s_{ij}\\) locations (argument opportunity) depending chosen law. effect distance number opportunities can adjusted parameter (argument param) except original radiation law uniform law. package consider eight probabilistic laws described details Lenormand et al. (2016) . Four gravity laws (Carey 1858; Zipf 1946; Barthelemy 2011; Lenormand et al. 2016) , three intervening opportunity laws (Schneider 1959; Simini et al. 2012; Yang et al. 2014)  uniform law. Gravity law exponential distance decay function (law = \"GravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law exponential distance decay function (law = \"NGravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Gravity law power distance decay function (law = \"GravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law power distance decay function (law = \"NGravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Schneider's intervening opportunities law (law = \"Schneider\"). arguments mass_origin, mass_destination (optional), opportunity param used. Radiation law (law = \"Rad\"). arguments mass_origin, mass_destination (optional) opportunity used. Extended radiation law (law = \"RadExt\"). arguments mass_origin, mass_destination (optional), opportunity param used. Uniform law (law = \"Unif\"). argument mass_origin used extract number locations. Second, propose four constrained models generate flows distribution probability. models respect different level constraints. constraints can preserve total number trips (argument nb_trips) number -going trips \\(O_{}\\) (argument out_trips) /number -coming \\(D_{j}\\) (argument in_trips) according model. sum -going trips \\(\\sum_{} O_{}\\) equal sum -coming trips \\(\\sum_{j} D_{j}\\). Unconstrained model (model = \"UM\"). nb_trips preserved (arguments out_trips in_trips used). Production constrained model (model = \"PCM\"). out_trips preserved (arguments nb_trips in_trips used). Attraction constrained model (model = \"ACM\"). in_trips preserved (arguments nb_trips out_trips used). Doubly constrained model (model = \"DCM\"). out_trips in_trips preserved (arguments nb_tripswill used). doubly constrained model based Iterative Proportional Fitting process (Deming Stephan 1940) . arguments maxiter (50 default) mindiff (0.01 default) can used tune model. mindiff minimal tolerated relative error simulated observed marginals. maxiter ensures algorithm stops even converged toward mindiff wanted value. default, average = FALSE, nbrep matrices generated proba multinomial random draws take different forms according model used. case, models deal positive integers inputs outputs. Nevertheless, also possible generate average matrix based multinomial distribution (based infinite number drawings). case, models' inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"inputs based number locations sorted order. recommended use location ID vector names, matrix rownames matrix colnames set check_names = TRUE verify everything order running function (check_names = FALSE default). Note function check_format_names() can used control validity inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169. Carey HC (1858). Principles Social Science. Lippincott. Zipf GK (1946). “P1 P2/D Hypothesis: Intercity Movement Persons.” American Sociological Review, 11(6), 677--686. Barthelemy M (2011). “Spatial Networks.” Physics Reports, 499, 1-101. Schneider M (1959). “Gravity models trip distribution theory.” Papers regional science association, 5, 51-58. Simini F, González MC, Maritan , Barabasi (2012). “universal model mobility migration patterns.” Nature, 484, 96-100. Yang Y, Herrera C, Eagle N, González MC (2014). “Limits Predictability Commuting Flows Absence Data Calibration.” Scientific Reports, 4(5662), 5662. Deming , Stephan FF (1940). “Least Squares Adjustment Sample Frequency Table Expected Marginal Totals Known.” Annals Mathematical Statistics, 11, 427-444.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) mj <- mi Oi <- as.numeric(mass[, 2]) Dj <- as.numeric(mass[, 3])  res <- run_law_model(   law = \"GravExp\", mass_origin = mi, mass_destination = mj,   distance = distance, opportunity = NULL, param = 0.01,   model = \"DCM\", nb_trips = NULL, out_trips = Oi, in_trips = Dj,   average = FALSE, nbrep = 3, maxiter = 50, mindiff = 0.01,   write_proba = FALSE,   check_names = FALSE )  print(res) #>        Argument   Value #> 1           Law GravExp #> 2         Model     DCM #> 3 #Replications       3 #> 4   #Parameters       1 #> 5     Parameter    0.01"},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution models — run_model","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"function estimates mobility flows using different distribution models. described (Lenormand et al. 2016) , propose two-step approach generate mobility flows separating trip distribution law, gravity intervening opportunities, modeling approach used generate flows law. function uses second step generate mobility flow based matrix probabilities using different models.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"","code":"run_model(   proba,   model = \"UM\",   nb_trips = 1000,   out_trips = NULL,   in_trips = out_trips,   average = FALSE,   nbrep = 3,   maxiter = 50,   mindiff = 0.01,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"proba squared matrix probability. sum matrix element must equal 1. normalized automatically case. model character indicating model use. nb_trips numeric value indicating total number trips. Must integer average = FALSE (see Details). out_trips numeric vector representing number outgoing trips per location. Must vector integers average = FALSE (see Details). in_trips numeric vector representing number incoming trips per location. Must vector integers average = FALSE (see Details). average boolean indicating average mobility flow matrix generated instead nbrep matrices based random draws (see Details). nbrep integer indicating number replications associated model run. Note nbrep = 1 average = TRUE (see Details). maxiter integer indicating maximal number iterations adjusting Doubly Constrained Model (see Details). mindiff numeric strictly positive value indicating stopping criterion adjusting Doubly Constrained Model (see Details). check_names boolean indicating ID location used vector names, matrix rownames colnames checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"object class TDLM. list matrices containing nbrep simulated matrices.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"propose four constrained models generate flow matrix probabilities. models respect different level constraints. constraints can preserve total number trips (argument nb_trips) number -going trips \\(O_{}\\) (argument out_trips) /number -coming \\(D_{j}\\) (argument in_trips) according model. sum -going trips \\(\\sum_{} O_{}\\) equal sum -coming trips \\(\\sum_{j} D_{j}\\). Unconstrained model (model = \"UM\"). nb_trips preserved (arguments out_trips in_trips used). Production constrained model (model = \"PCM\"). out_trips preserved (arguments nb_trips in_trips used). Attraction constrained model (model = \"ACM\"). in_trips preserved (arguments nb_trips out_trips used). Doubly constrained model (model = \"DCM\"). out_trips in_trips preserved (arguments nb_tripswill used). doubly constrained model based Iterative Proportional Fitting process (Deming Stephan 1940) . arguments maxiter (50 default) mindiff (0.01 default) can used tune model. mindiff minimal tolerated relative error simulated observed marginals. maxiter ensures algorithm stops even converged toward mindiff wanted value. default, average = FALSE, nbrep matrices generated proba multinomial random draws take different forms according model used. case, models deal positive integers inputs outputs. Nevertheless, also possible generate average matrix based multinomial distribution (based infinite number drawings). case, models' inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"inputs based number locations sorted order. recommended use location ID vector names, matrix rownames matrix colnames set check_names = TRUE verify everything order running function (check_names = FALSE default). Note function check_format_names() can used control validity inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"Lenormand M, Bassolas , Ramasco JJ (2016). “Systematic comparison trip distribution laws models.” Journal Transport Geography, 51, 158-169. Deming , Stephan FF (1940). “Least Squares Adjustment Sample Frequency Table Expected Marginal Totals Known.” Annals Mathematical Statistics, 11, 427-444.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"","code":"data(mass) data(od)  proba <- od / sum(od)  Oi <- as.numeric(mass[, 2]) Dj <- as.numeric(mass[, 3])  res <- run_model(   proba = proba,   model = \"DCM\", nb_trips = NULL, out_trips = Oi, in_trips = Dj,   average = FALSE, nbrep = 3, maxiter = 50, mindiff = 0.01,   check_names = FALSE )  # print(res)"}]
