[{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tutorial for TDLM","text":"tutorial aims describe different features R package TDLM. main purpose TDLM package provide rigorous framework fairly comparing trip distribution laws models (Lenormand et al., 2016). general framework based two-step approach generating mobility flows separating trip distribution law, gravity intervening opportunities, modeling approach used generate flows law.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"a-short-note-on-terminology","dir":"Articles","previous_headings":"","what":"A short note on terminology","title":"Tutorial for TDLM","text":"framework part four-step travel model. corresponds second step, called trip distribution, aims match trip origins trip destinations. model used generate trips flows, generally degree interaction locations, often referred spatial interaction model. Depending research area, matrix network formalism may used describe spatial interactions. Origin-Destination matrices (trip tables) common geography transportation, statistical physics complex systems studies, term mobility networks usually preferred.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"origindestination-matrix","dir":"Articles","previous_headings":"","what":"Origin–Destination matrix","title":"Tutorial for TDLM","text":"description movements within given area represented Origin-Destination (OD) matrix. area interest divided nn locations, TijT_{ij} represents volume flows location ii location jj. volume typically corresponds number trips commuting flow (.e., number individuals living ii working jj). OD matrix square, contains positive values, may zero diagonal (Figure 1).","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"aggregated-inputs-information","dir":"Articles","previous_headings":"","what":"Aggregated inputs information","title":"Tutorial for TDLM","text":"Three categories inputs typically considered simulate OD matrix (Figure 2). masses distances primary ingredients used generate matrix probabilities based given distribution law. Thus, probability pijp_{ij} observing trip location ii location jj depends masses, demand origin (mim_i), offer destination (mjm_j). Typically, population used surrogate demand offer. probability movement also depends costs, based distance dijd_{ij} locations number opportunities sijs_{ij} locations, depending chosen law (details provided next “Trip distribution laws” section). general, effect cost can adjusted parameter. margins used generate OD matrix matrix probabilities preserving total number trips (NN), number outgoing trips (OiO_i), /number incoming trips (DjD_j) (details provided “Constrained distribution models” section).","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"trip-distribution-laws","dir":"Articles","previous_headings":"","what":"Trip distribution laws","title":"Tutorial for TDLM","text":"purpose trip distribution law estimate probability pijp_{ij} , possible travels system, one location ii location jj. probability asymmetric ii jj, flows . takes form square matrix probabilities. probability normalized across possible pairs origins destinations, ∑,j=1npij=1\\sum_{,j=1}^n p_{ij} = 1. Therefore, matrix probabilities can obtained normalizing OD matrix (Figure 3).  mentioned previous section, trip distribution laws depend demand origin (mim_i), offer destination (mjm_j), cost move ii jj. two major approaches estimating probability matrix. traditional gravity approach, analogy Newton’s law gravitation, based assumption amount trips two locations related populations decays according function distance dijd_{ij} locations. contrast gravity law, laws intervening opportunities hinge assumption number opportunities sijs_{ij} locations plays important role distance (Lenormand et al., 2016). fundamental difference two schools thought illustrated Figure 4.  important note effect cost locations (distance number opportunities) can usually adjusted parameter, can calibrated automatically comparing simulated matrix observed data.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"constrained-distribution-models","dir":"Articles","previous_headings":"","what":"Constrained distribution models","title":"Tutorial for TDLM","text":"purpose trip distribution models generate OD matrix T̃=(T̃ij)\\tilde{T}=(\\tilde{T}_{ij}) drawing random NN trips trip distribution law (pij)1≤,j≤n(p_{ij})_{1 \\leq ,j \\leq n} respecting different level constraints according model. considered four different types models package. can observed Figure 5, four models respect different level constraints total number trips total number -going -coming trips locations (.e. margins).  specifically, volume flows T̃ij\\tilde{T}_{ij} generated matrix probability multinomial random draws take different forms according model used (Lenormand et al., 2016). Therefore, since process stochastic, simulated matrix unique composed integers. Note also possible generate average matrix multinomial trials.","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"goodness-of-fit-measures","dir":"Articles","previous_headings":"","what":"Goodness-of-fit measures","title":"Tutorial for TDLM","text":"Finally, trip distribution laws can calibrated, trip distribution laws models can evaluated comparing simulated matrix T̃\\tilde{T} observed matrix TT. comparisons rely various goodness--fit measures, may may account distance locations. measures described .","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"common-part-of-commuters-cpc","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Common Part of Commuters (CPC)","title":"Tutorial for TDLM","text":"CPC(T,T̃)=2⋅∑,j=1nmin(Tij,T̃ij)N+Ñ\\displaystyle CPC(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{,j=1}^n min(T_{ij},\\tilde{T}_{ij})}{N + \\tilde{N}} (Gargiulo et al., 2012; Lenormand et al., 2012, 2016)","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"normalized-root-mean-square-error-nrmse","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Normalized Root Mean Square Error (NRMSE)","title":"Tutorial for TDLM","text":"NRMSE(T,T̃)=∑,j=1n(Tij−T̃ij)2N\\displaystyle NRMSE(T,\\tilde{T}) = \\sqrt{\\frac{\\sum_{,j=1}^n (T_{ij}-\\tilde{T}_{ij})^2}{N}}","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"kullbackleibler-divergence-ks","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Kullback–Leibler divergence (KS)","title":"Tutorial for TDLM","text":"KL(T,T̃)=∑,j=1nTijNlog(TijNÑT̃ij)\\displaystyle KL(T,\\tilde{T}) = \\sum_{,j=1}^n \\frac{T_{ij}}{N}\\log\\left(\\frac{T_{ij}}{N}\\frac{\\tilde{N}}{\\tilde{T}_{ij}}\\right)(Kullback & Leibler, 1951)","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"common-part-of-links-cpl","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Common Part of Links (CPL)","title":"Tutorial for TDLM","text":"CPL(T,T̃)=2⋅∑,j=1n1Tij>0⋅1T̃ij>0∑,j=1n1Tij>0+∑,j=1n1T̃ij>0\\displaystyle CPL(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{,j=1}^n 1_{T_{ij}>0} \\cdot 1_{\\tilde{T}_{ij}>0}}{\\sum_{,j=1}^n 1_{T_{ij}>0} + \\sum_{,j=1}^n 1_{\\tilde{T}_{ij}>0}}(Lenormand et al., 2016)","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"common-part-of-commuters-based-on-the-disance-cpc_d","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Common Part of Commuters based on the disance (CPC_d)","title":"Tutorial for TDLM","text":"Let us consider NkN_k (Ñk\\tilde{N}_k) sum observed (simulated) flows distance comprised bin [bin_size⋅k−bin_size,bin_size⋅k[[\\mbox{bin_size} \\cdot k-\\mbox{bin_size}, \\mbox{bin_size} \\cdot k[. CPCd(T,T̃)=2⋅∑k=1∞min(Nk,Ñk)N+Ñ\\displaystyle CPC_d(T,\\tilde{T}) = \\frac{2\\cdot\\sum_{k=1}^{\\infty} min(N_{k},\\tilde{N}_{k})}{N+\\tilde{N}} (Lenormand et al., 2016)","code":""},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"kolmogorv-smirnov-statistic-and-p-value-ks-","dir":"Articles","previous_headings":"Goodness-of-fit measures","what":"Kolmogorv-Smirnov statistic and p-value (KS).","title":"Tutorial for TDLM","text":"measures, described Massey (1951), based observed simulated flow distance distributions computed using ks_test function Ecume package.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"data","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Data","title":"Tutorial for TDLM","text":"example, use commuting data US Kansas 2000 illustrate main functions package. dataset comprises three tables providing information commuting flows 105 US Kansas counties 2000. observed OD matrix od zero-diagonal square matrix integers. element matrix represents number commuters pair US Kansas counties. aggregated data composed distance matrix, masses margins contained data.frame mass. data must always based number locations sorted order. function check_format_names can used verify validity inputs running main functions package. Optional spatial information also provided . county spatial object containing geometry 105 US Kansas counties 2000.  coords coords_xy two dataframes providing longitude/latitude X/Y coordinates location, respectively.","code":"data(od)  od[1:5, 1:5] ##       20001 20003 20005 20007 20009 ## 20001     0    71     0     0     0 ## 20003   236     0     0     0     0 ## 20005     0     0     0     0     0 ## 20007     0     0     0     0     8 ## 20009     0     0     0    11     0 dim(od) ## [1] 105 105 data(distance)  distance[1:5, 1:5] ##           20001     20003    20005    20007    20009 ## 20001   0.00000  36.50943 182.9291 306.8503 308.8995 ## 20003  36.50943   0.00000 146.4335 317.5593 303.2348 ## 20005 182.92913 146.43350   0.0000 389.5330 319.5319 ## 20007 306.85034 317.55926 389.5330   0.0000 139.0661 ## 20009 308.89947 303.23478 319.5319 139.0661   0.0000 dim(distance) ## [1] 105 105 data(mass)  mass[1:10,] ##       Population Out-commuters In-commuters ## 20001      14385          1267         1343 ## 20003       8110          1346          361 ## 20005      16774          1065         1247 ## 20007       5307           260          201 ## 20009      28205          1129         1324 ## 20011      15379           662          761 ## 20013      10724          1148          984 ## 20015      59482         14182         3579 ## 20017       3030           681           93 ## 20019       4359           486          180 dim(mass) ## [1] 105   3 mi <- as.numeric(mass[,1]) names(mi) <- rownames(mass)  mj <- mi  Oi <- as.numeric(mass[,2]) names(Oi) <- rownames(mass)  Dj <- as.numeric(mass[,3]) names(Dj) <- rownames(mass) check_format_names(vectors = list(mi = mi, mj = mj, Oi = Oi, Dj = Dj),                    matrices = list(od = od, distance = distance),                    check = \"format_and_names\") ## The inputs passed the format_and_names checks successfully! library(sf)  data(county)  county[1:10,] ## Simple feature collection with 10 features and 4 fields ## Geometry type: MULTIPOLYGON ## Dimension:     XY ## Bounding box:  xmin: -99.0334 ymin: 36.99796 xmax: -94.6139 ymax: 40.0006 ## Geodetic CRS:  WGS 84 ##         ID Longitude Latitude     Area                       geometry ## 1016 20001 -95.30137 37.88581 1307.667 MULTIPOLYGON (((-95.08805 3... ## 983  20003 -95.29334 38.21429 1512.337 MULTIPOLYGON (((-95.07771 3... ## 869  20005 -95.31288 39.53194 1125.682 MULTIPOLYGON (((-95.56751 3... ## 1064 20007 -98.68482 37.22888 2941.524 MULTIPOLYGON (((-98.52686 3... ## 962  20009 -98.75650 38.47904 2330.541 MULTIPOLYGON (((-99.03239 3... ## 1017 20011 -94.84928 37.85522 1653.609 MULTIPOLYGON (((-94.61413 3... ## 843  20013 -95.56416 39.82657 1480.469 MULTIPOLYGON (((-95.77332 3... ## 1011 20015 -96.83911 37.78125 3744.168 MULTIPOLYGON (((-96.52571 3... ## 974  20017 -96.59395 38.30205 2013.697 MULTIPOLYGON (((-96.81972 3... ## 1079 20019 -96.24535 37.15007 1669.418 MULTIPOLYGON (((-96.52495 3... plot(county) coords[1:10,] ##       Longitude Latitude ## 20001 -95.30137 37.88581 ## 20003 -95.29334 38.21429 ## 20005 -95.31288 39.53194 ## 20007 -98.68482 37.22888 ## 20009 -98.75650 38.47904 ## 20011 -94.84928 37.85522 ## 20013 -95.56416 39.82657 ## 20015 -96.83911 37.78125 ## 20017 -96.59395 38.30205 ## 20019 -96.24535 37.15007 coords_xy[1:10,] ##               X       Y ## 20001 -10608899 4563329 ## 20003 -10608005 4609773 ## 20005 -10610183 4798171 ## 20007 -10985547 4471108 ## 20009 -10993524 4647367 ## 20011 -10558574 4559025 ## 20013 -10638154 4840804 ## 20015 -10780080 4548659 ## 20017 -10752789 4622229 ## 20019 -10713984 4460066"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"extract-additional-spatial-information","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Extract Additional Spatial Information","title":"Tutorial for TDLM","text":"functions extract_distances, extract_opportunities, extract_spatial_information can used extract matrices distances number intervening opportunities. first function computes distances kilometers pairs locations based geographical coordinates. can calculate either great-circle distances, using longitude/latitude coordinates Haversine formula Euclidean distances based X/Y coordinates  second function computes number opportunities pairs locations. given pair locations, number opportunities origin destination based number opportunities within circle radius equal distance origin destination, centered origin. number opportunities origin destination included. case, number inhabitants (mim_i) used proxy number opportunities. last function takes input spatial object containing geometry locations can handled sf package. returns matrix great-circle distances locations (expressed km). optional id can also provided used names outputs. function also allows extracting surface area location (square kilometers), can useful calibrate trip distribution laws’ parameter value (see ).","code":"haversine_d <- extract_distances(coords = coords,                                  method = \"Haversine\") haversine_d[1:5, 1:5] ##           [,1]      [,2]     [,3]     [,4]     [,5] ## [1,]   0.00000  36.50943 182.9291 306.8503 308.8995 ## [2,]  36.50943   0.00000 146.4335 317.5593 303.2348 ## [3,] 182.92913 146.43350   0.0000 389.5330 319.5319 ## [4,] 306.85034 317.55926 389.5330   0.0000 139.0661 ## [5,] 308.89947 303.23478 319.5319 139.0661   0.0000 distance[1:5, 1:5] ##           20001     20003    20005    20007    20009 ## 20001   0.00000  36.50943 182.9291 306.8503 308.8995 ## 20003  36.50943   0.00000 146.4335 317.5593 303.2348 ## 20005 182.92913 146.43350   0.0000 389.5330 319.5319 ## 20007 306.85034 317.55926 389.5330   0.0000 139.0661 ## 20009 308.89947 303.23478 319.5319 139.0661   0.0000 xy_d <- extract_distances(coords = coords_xy,                           method = \"Euclidean\")  oldmar <- par()$mar par(mar = c(4.5, 6, 1, 1)) plot(haversine_d, xy_d, xlim=c(0,900), ylim=c(0,900),      type=\"p\", pch=16, cex=2, lty=1, lwd=3,       col=\"steelblue3\", axes=FALSE, xlab=\"\", ylab=\"\") axis(1, cex.axis=1.2) axis(2, cex.axis=1.2, las=1) mtext(\"Haversine (km)\", 1, line = 3.25, cex = 1.75) mtext(\"Euclidean (km)\", 2, line = 4, cex = 1.75) box(lwd=1.5) par(mar = oldmar) sij <- extract_opportunities(opportunity = mi,                              distance = distance,                              check_names = TRUE) sij[1:5, 1:5] ##         20001   20003   20005   20007   20009 ## 20001       0   16997 1445725 2358187 2363494 ## 20003       0       0 1374401 2403828 2354815 ## 20005 1311224 1240896       0 2454129 2346302 ## 20007 1433163 1481954 2489482       0  634786 ## 20009 1778443 1651945 1820549  344665       0 spi <- extract_spatial_information(county, id = \"ID\")  sp_d <- spi$distance  sp_d[1:5, 1:5] ##           20001     20003    20005    20007    20009 ## 20001   0.00000  36.50943 182.9291 306.8503 308.8995 ## 20003  36.50943   0.00000 146.4335 317.5593 303.2348 ## 20005 182.92913 146.43350   0.0000 389.5330 319.5319 ## 20007 306.85034 317.55926 389.5330   0.0000 139.0661 ## 20009 308.89947 303.23478 319.5319 139.0661   0.0000 distance[1:5, 1:5] ##           20001     20003    20005    20007    20009 ## 20001   0.00000  36.50943 182.9291 306.8503 308.8995 ## 20003  36.50943   0.00000 146.4335 317.5593 303.2348 ## 20005 182.92913 146.43350   0.0000 389.5330 319.5319 ## 20007 306.85034 317.55926 389.5330   0.0000 139.0661 ## 20009 308.89947 303.23478 319.5319 139.0661   0.0000 mean(spi$surface) ## [1] 2028.05"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"run-functions","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Run functions","title":"Tutorial for TDLM","text":"main function package run_law_model. function two sets arguments, one law another one model. inputs (described ) necessary run function depends law (either matrix distances number opportunities can used, neither uniform law) model associated constraints (number trips, -going trips /-coming trips). example generate three simulated ODs normalized gravity law exponential distance decay function (Lenormand et al., 2016) Doubly Constrained Model. output object class TDLM. case list matrices composed three simulated matrices (replication_1, replication_2 replication_3), matrix probabilities (called proba) associated law returned write_proba = TRUE. objects class TDLM contain table info summarizing simulation run. simulation run based one parameter value. possible use vector instead scalar param argument. case list list matrices returned (one parameter value). also important note radiation law uniform law free parameter. argument average can used generate average matrix based multinomial distribution (based infinite number drawings). case, models’ inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers. functions run_law run_model designed run one two components two-step approach. function run_law_model, worth noting inter-location flows considered distribution laws, meaning matrix probabilities (associated simulated OD matrices) generated given distribution law run_law_model run_law zero-diagonal matrix. Nevertheless, possible generate intra-location flows run_model taking kind matrix probabilities input.","code":"res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = 0.01,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3) print(res) ##        Argument    Value ## 1           Law NGravExp ## 2         Model      DCM ## 3 #Replications        3 ## 4   #Parameters        1 ## 5     Parameter     0.01 str(res) ## List of 5 ##  $ info         :'data.frame':   5 obs. of  2 variables: ##   ..$ Argument: chr [1:5] \"Law\" \"Model\" \"#Replications\" \"#Parameters\" ... ##   ..$ Value   : chr [1:5] \"NGravExp\" \"DCM\" \"3\" \"1\" ... ##  $ replication_1: num [1:105, 1:105] 0 23 4 0 2 15 4 105 6 6 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ replication_2: num [1:105, 1:105] 0 23 4 0 2 16 4 104 5 7 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ replication_3: num [1:105, 1:105] 0 23 4 0 2 16 4 104 5 6 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  $ proba        : num [1:105, 1:105] 0.00 4.31e-05 2.16e-05 3.90e-06 1.81e-05 ... ##   ..- attr(*, \"dimnames\")=List of 2 ##  - attr(*, \"class\")= chr [1:2] \"TDLM\" \"list\" ##  - attr(*, \"from\")= chr \"run_law_model\" ##  - attr(*, \"proba\")= logi TRUE res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = c(0.01,0.02),                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3) print(res) ##        Argument    Value ## 1           Law NGravExp ## 2         Model      DCM ## 3 #Replications        3 ## 4   #Parameters        2 ## 5   Parameter 1     0.01 ## 6   Parameter 2     0.02 str(res) ## List of 3 ##  $ info       :'data.frame': 6 obs. of  2 variables: ##   ..$ Argument: chr [1:6] \"Law\" \"Model\" \"#Replications\" \"#Parameters\" ... ##   ..$ Value   : chr [1:6] \"NGravExp\" \"DCM\" \"3\" \"2\" ... ##  $ parameter_1:List of 4 ##   ..$ replication_1: num [1:105, 1:105] 0 23 4 0 2 16 4 102 5 6 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_2: num [1:105, 1:105] 0 24 4 0 2 15 4 104 5 6 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_3: num [1:105, 1:105] 0 24 4 0 2 16 4 104 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ proba        : num [1:105, 1:105] 0.00 4.31e-05 2.16e-05 3.90e-06 1.81e-05 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##  $ parameter_2:List of 4 ##   ..$ replication_1: num [1:105, 1:105] 0 54 2 0 0 38 1 76 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_2: num [1:105, 1:105] 0 54 2 0 0 38 1 76 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ replication_3: num [1:105, 1:105] 0 56 2 0 0 39 1 78 5 7 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##   ..$ proba        : num [1:105, 1:105] 0.00 8.13e-05 8.17e-06 7.10e-07 3.16e-06 ... ##   .. ..- attr(*, \"dimnames\")=List of 2 ##  - attr(*, \"class\")= chr [1:2] \"TDLM\" \"list\" ##  - attr(*, \"from\")= chr \"run_law_model\" ##  - attr(*, \"proba\")= logi TRUE res <- run_law_model(law = \"Rad\",                       mass_origin = mi,                       mass_destination = mj,                       distance = NULL,                       opportunity = sij,                      param = NULL,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3)  print(res) ##        Argument Value ## 1           Law   Rad ## 2         Model   DCM ## 3 #Replications     3 res$replication_1[1:10,1:10] ##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ##  [1,]    0   33    0    0    0  121    0    1    0     0 ##  [2,]  570    0    0    0    0   22    0    0    0     0 ##  [3,]    0    0    0    0    0    0  198    0    0     0 ##  [4,]    0    0    0    0    0    0    0    0    0     0 ##  [5,]    0    0    0    1    0    0    0    3    0     0 ##  [6,]   17    2    0    0    0    0    0    0    0     0 ##  [7,]    0    0  204    0    0    0    0    0    0     0 ##  [8,]    4    1    1    1   11    5    1    0    0     1 ##  [9,]    0    0    0    0    0    0    0   39    0     0 ## [10,]    0    0    0    0    0    0    0   13    0     0 res <- run_law_model(law = \"Rad\",                       mass_origin = mi,                       mass_destination = mj,                       distance = NULL,                       opportunity = sij,                      param = NULL,                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = TRUE,                       nbrep = 3)  print(res) ##        Argument       Value ## 1           Law         Rad ## 2         Model         DCM ## 3 #Replications 1 (average) res$replication_1[1:10,1:10] ##               [,1]         [,2]         [,3]         [,4]         [,5] ##  [1,] 4.207454e-04 3.248924e+01 1.629984e-01 0.0169209490 1.523725e-01 ##  [2,] 5.645506e+02 6.155812e-04 1.486180e-01 0.0133929974 1.262074e-01 ##  [3,] 8.174148e-02 2.927128e-02 8.564946e-04 0.0180562693 1.785403e-01 ##  [4,] 5.866220e-03 1.762770e-03 5.461852e-03 0.0006206272 1.984250e-01 ##  [5,] 7.824940e-02 2.902253e-02 2.083665e-01 1.3841229993 7.860351e-04 ##  [6,] 1.794519e+01 2.896778e+00 1.227317e-01 0.0118216041 1.064531e-01 ##  [7,] 4.854529e-02 1.825077e-02 2.003666e+02 0.0121155517 1.240133e-01 ##  [8,] 4.235287e+00 1.150834e+00 1.817298e+00 1.5952317911 1.087001e+01 ##  [9,] 1.701860e-02 6.442397e-03 1.358021e-02 0.0027705322 2.718136e-02 ## [10,] 3.657437e-01 9.929259e-03 1.029943e-02 0.0078265447 2.624542e-02 ##               [,6]         [,7]         [,8]         [,9]        [,10] ##  [1,] 1.206594e+02 8.830093e-02  1.637304888 0.0120698542 0.0777923728 ##  [2,] 2.261365e+01 1.297312e-01  0.862290746 0.0050699294 0.0060667099 ##  [3,] 1.934135e-01 1.973623e+02  0.918724724 0.0061614808 0.0053164987 ##  [4,] 9.469349e-03 6.169547e-03  0.278155220 0.0008433002 0.0012892865 ##  [5,] 1.033249e-01 2.460352e-01  3.462295645 0.0158169340 0.0150487684 ##  [6,] 5.850044e-04 1.180099e-01  0.752499705 0.0038974570 0.0092130934 ##  [7,] 1.138611e-01 2.549294e-03  0.633540548 0.0040869895 0.0021031775 ##  [8,] 5.040588e+00 1.982879e+00  0.002650424 0.7993806174 1.0370497229 ##  [9,] 2.296625e-02 1.230871e-02 39.049317001 0.0005691793 0.0015470504 ## [10,] 6.732294e-02 1.102089e-02 13.987963900 0.0025478503 0.0002716179"},{"path":"https://epivec.github.io/TDLM/articles/TDLM.html","id":"parameters-calibration-models-evaluation","dir":"Articles","previous_headings":"Example of commuting in Kansas","what":"Parameters’ calibration & models’ evaluation","title":"Tutorial for TDLM","text":"package contains two function help calibrating evaluating model. function gof computes goodness--fit measures observed simulated OD matrices function calib_param estimates optimal parameter value given law given spatial distribution location based Figure 8 (Lenormand et al., 2016). Let us illustrate trip distribution laws models’ calibration normalized gravity law exponential distance decay function Doubly Constrained Model. Based average surface area Kansas counties (square kilometers) seems optimal parameter value normalized gravity law exponential distance decay function (described (Lenormand et al., 2016)) commuting US Kansas counties around 0.085. just estimation help us identify potential range parameter value, order rigorously calibrate evaluate trip distribution law model need compute goodness--fit measure wide range parameter values. necessary information stored object calib, goodness--fit measures agree parameter value 0.075 case associated average Common Part Commuter equal 85.6%.","code":"print(calib_param(av_surf = mean(spi$surface), law = \"NGravExp\")) ## [1] 0.08521097 res <- run_law_model(law = \"NGravExp\",                       mass_origin = mi,                       mass_destination = mj,                       distance = distance,                       opportunity = NULL,                      param = seq(0.05,0.1,0.005),                      write_proba = TRUE,                                            model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 3)  calib <- gof(sim = res, obs = od, measures = \"all\", distance = distance)  print(calib) ##       Parameter Parameter_value    Simulation       CPC     NRMSE         KL ## 1   parameter_1            0.05 replication_1 0.8163636 10.518982 0.12965677 ## 2   parameter_1            0.05 replication_2 0.8164784 10.514297 0.12942449 ## 3   parameter_1            0.05 replication_3 0.8164535 10.513960 0.12953321 ## 4   parameter_2           0.055 replication_1 0.8314375  9.425706 0.11351207 ## 5   parameter_2           0.055 replication_2 0.8317020  9.395650 0.11329065 ## 6   parameter_2           0.055 replication_3 0.8317220  9.409476 0.11337386 ## 7   parameter_3            0.06 replication_1 0.8438459  8.650842 0.09824054 ## 8   parameter_3            0.06 replication_2 0.8440106  8.635141 0.09822018 ## 9   parameter_3            0.06 replication_3 0.8438609  8.661549 0.09861248 ## 10  parameter_4           0.065 replication_1 0.8520816  8.162601 0.08792356 ## 11  parameter_4           0.065 replication_2 0.8521316  8.160788 0.08792961 ## 12  parameter_4           0.065 replication_3 0.8521515  8.163288 0.08790027 ## 13  parameter_5            0.07 replication_1 0.8553809  7.947010 0.08021586 ## 14  parameter_5            0.07 replication_2 0.8552761  7.957080 0.08014640 ## 15  parameter_5            0.07 replication_3 0.8552412  7.961720 0.08022774 ## 16  parameter_6           0.075 replication_1 0.8556305  7.971343 0.07911644 ## 17  parameter_6           0.075 replication_2 0.8557203  7.956280 0.07945300 ## 18  parameter_6           0.075 replication_3 0.8556504  7.968095 0.07912704 ## 19  parameter_7            0.08 replication_1 0.8550615  8.116825 0.07424003 ## 20  parameter_7            0.08 replication_2 0.8550665  8.110804 0.07430792 ## 21  parameter_7            0.08 replication_3 0.8550814  8.116587 0.07437617 ## 22  parameter_8           0.085 replication_1 0.8531148  8.378007 0.07384909 ## 23  parameter_8           0.085 replication_2 0.8532097  8.367113 0.07391400 ## 24  parameter_8           0.085 replication_3 0.8531298  8.376190 0.07368965 ## 25  parameter_9            0.09 replication_1 0.8498455  8.709584 0.07529475 ## 26  parameter_9            0.09 replication_2 0.8497706  8.725203 0.07543442 ## 27  parameter_9            0.09 replication_3 0.8498555  8.710726 0.07523048 ## 28 parameter_10           0.095 replication_1 0.8462767  9.095707 0.08084042 ## 29 parameter_10           0.095 replication_2 0.8463666  9.090465 0.08103406 ## 30 parameter_10           0.095 replication_3 0.8463915  9.085080 0.08094834 ## 31 parameter_11             0.1 replication_1 0.8423934  9.471425 0.08345671 ## 32 parameter_11             0.1 replication_2 0.8423286  9.498150 0.08351193 ## 33 parameter_11             0.1 replication_3 0.8423385  9.480187 0.08397747 ##          CPL     CPC_d    KS_stat   KS_pval ## 1  0.6599160 0.8952967 0.07308147 0.9998529 ## 2  0.6594221 0.8953566 0.07302656 0.9998552 ## 3  0.6597480 0.8953166 0.07313138 0.9998511 ## 4  0.6713432 0.9154467 0.05010134 1.0000000 ## 5  0.6715177 0.9156264 0.04997156 1.0000000 ## 6  0.6709945 0.9157062 0.04988172 1.0000000 ## 7  0.6722507 0.9317235 0.03028073 1.0000000 ## 8  0.6727911 0.9317584 0.03028073 1.0000000 ## 9  0.6724278 0.9316735 0.03025078 1.0000000 ## 10 0.6724866 0.9430089 0.03375969 1.0000000 ## 11 0.6730498 0.9430688 0.03379463 1.0000000 ## 12 0.6724866 0.9429989 0.03377966 1.0000000 ## 13 0.6742623 0.9496973 0.03740836 1.0000000 ## 14 0.6746495 0.9495475 0.03741834 1.0000000 ## 15 0.6742623 0.9495775 0.03743831 1.0000000 ## 16 0.6714845 0.9479952 0.04352275 1.0000000 ## 17 0.6722892 0.9480352 0.04355270 1.0000000 ## 18 0.6718891 0.9480202 0.04351776 1.0000000 ## 19 0.6629492 0.9407728 0.04953233 1.0000000 ## 20 0.6625387 0.9408826 0.04941753 1.0000000 ## 21 0.6625387 0.9408127 0.04949739 1.0000000 ## 22 0.6520356 0.9329963 0.05645032 1.0000000 ## 23 0.6518141 0.9330362 0.05647528 1.0000000 ## 24 0.6507634 0.9329563 0.05644533 1.0000000 ## 25 0.6408588 0.9258087 0.06234510 0.9999993 ## 26 0.6408840 0.9256939 0.06239501 0.9999993 ## 27 0.6413008 0.9256939 0.06238503 0.9999993 ## 28 0.6350679 0.9185863 0.06728153 0.9999941 ## 29 0.6355202 0.9186461 0.06731148 0.9999940 ## 30 0.6350679 0.9187859 0.06728153 0.9999941 ## 31 0.6237724 0.9121175 0.07271211 0.9999610 ## 32 0.6237724 0.9121075 0.07267717 0.9999613 ## 33 0.6242383 0.9120526 0.07273707 0.9999606 cpc <- aggregate(calib$CPC, list(calib$Parameter_value), mean)[,2]  oldmar <- par()$mar par(mar = c(4.5, 6, 1, 1)) plot(seq(0.05,0.1,0.005), cpc, type=\"b\", pch=16, cex=2, lty=1, lwd=3,       col=\"steelblue3\", axes=FALSE, xlab=\"\", ylab=\"\") axis(1, cex.axis=1.2) axis(2, cex.axis=1.2, las=1) mtext(\"Parameter value\", 1, line = 3.25, cex = 1.75) mtext(\"Common Part of Commuters\", 2, line = 4, cex = 1.75) box(lwd=1.5) par(mar = oldmar)"},{"path":[]},{"path":"https://epivec.github.io/TDLM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maxime Lenormand. Author, maintainer.","code":""},{"path":"https://epivec.github.io/TDLM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lenormand M (2023). TDLM: Systematic Comparison Trip Distribution Laws Models. Journal Open Source Software 8, 5434.","code":"@Article{,   author = {{Lenormand} and {M.}},   title = {TDLM: Systematic Comparison of Trip Distribution Laws and Models},   journal = {Journal of Open Source Software},   year = {2023},   number = {88},   pages = {5434},   volume = {8},   doi = {10.21105/joss.05434}, }"},{"path":[]},{"path":[]},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_1-short-description","dir":"","previous_headings":"","what":"1 Short description","title":"Systematic Comparison of Trip Distribution Laws and Models","text":"main purpose TDLM package provide rigorous framework fairly comparing trip distribution laws models, described Lenormand et al. (2016). general framework relies two-step approach generate mobility flows, separating trip distribution law, gravity intervening opportunities, modeling approach used derive flows law.","code":""},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_2-install","dir":"","previous_headings":"","what":"2 Install","title":"Systematic Comparison of Trip Distribution Laws and Models","text":"TDLM package can installed following command R session: CRAN GitHub","code":"install.packages(\"TDLM\") # install.packages(\"devtools\") devtools::install_github(\"EpiVec/TDLM\", build_vignettes = TRUE)"},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_3-tutorial","dir":"","previous_headings":"","what":"3 Tutorial","title":"Systematic Comparison of Trip Distribution Laws and Models","text":"tutorial vignette available .","code":""},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_4-dependencies","dir":"","previous_headings":"","what":"4 Dependencies","title":"Systematic Comparison of Trip Distribution Laws and Models","text":"TDLM depends following packages: Ecume, mathjaxr, Rdpack, readr, rmarkdown, sf. Additionally, TDLM requires Java function properly. Please ensure Java installed correctly configured system.","code":""},{"path":"https://epivec.github.io/TDLM/index.html","id":"id_5-citation","dir":"","previous_headings":"","what":"5 Citation","title":"Systematic Comparison of Trip Distribution Laws and Models","text":"Lenormand M (2023) TDLM: R package systematic comparison trip distribution laws models. Journal Open Source Software 8, 5434. Please feel free open issue encounter problem package.","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic calibration of trip distribution laws' parameter — calib_param","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"function returns estimate optimal parameter value based average surface area locations (square kilometers) according law. estimation tested commuting data (kilometers).","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"","code":"calib_param(av_surf, law = \"NGravExp\")"},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"av_surf positive numeric value indicating average surface area locations (square kilometers). law character string indicating law use (see Details).","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"estimate optimal parameter value based average surface area locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"estimation based Figure 8 Lenormand et al. (2016) four types laws: normalized gravity law exponential distance decay function (law = \"NGravExp\"), normalized gravity law power distance decay function (law = \"NGravPow\"), Schneider's intervening opportunities law (law = \"Schneider\"), extended radiation law (law = \"RadExt\").","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/calib_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic calibration of trip distribution laws' parameter — calib_param","text":"","code":"data(county)  res <- extract_spatial_information(county, id = \"ID\") av_surf <- mean(res$surface)  calib_param(av_surf = av_surf, law = \"NGravExp\") #> [1] 0.08521097 calib_param(av_surf = av_surf, law = \"NGravPow\") #> [1] 3.295941 calib_param(av_surf = av_surf, law = \"Schneider\") #> [1] 2.475339e-06 calib_param(av_surf = av_surf, law = \"RadExt\") #> [1] 1.299361"},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check format of TDLM's inputs — check_format_names","title":"Check format of TDLM's inputs — check_format_names","text":"function checks TDLM's inputs required format (names).","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check format of TDLM's inputs — check_format_names","text":"","code":"check_format_names(vectors, matrices = NULL, check = \"format_and_names\")"},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check format of TDLM's inputs — check_format_names","text":"vectors list vectors. list can contain one vector. recommended name element list. vectors = NULL, matrices considered. matrices list matrices. list can contain one matrix. recommended name element list. matrices = NULL, vectors considered (default). check character indicating types check (\"format\" \"format_and_names\") used (see Details).","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check format of TDLM's inputs — check_format_names","text":"message indicating check passed failed.","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check format of TDLM's inputs — check_format_names","text":"TDLM's inputs based number locations sorted order. check = \"format\" run basic checks ensure structure inputs (dimensions, class, type...) correct. recommended use location ID vector names, matrix rownames, matrix colnames. Set check  = \"format_and_names\" check inputs' names. checks run successively, run function many times needed get message indicating inputs passed check successfully.","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check format of TDLM's inputs — check_format_names","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/check_format_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check format of TDLM's inputs — check_format_names","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) names(mi) <- rownames(mass) mj <- mi  check_format_names(   vectors = list(mi = mi, mj = mj),   matrices = list(distance = distance),   check = \"format_and_names\" ) #> The inputs passed the format_and_names checks successfully!"},{"path":"https://epivec.github.io/TDLM/reference/coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical coordinates of US Kansas counties' centroids in 2000 (Longitude/Latitude) — coords","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (Longitude/Latitude) — coords","text":"dataset containing geographical coordinates US Kansas counties' centroids 2000 (Longitude/Latitude).","code":""},{"path":"https://epivec.github.io/TDLM/reference/coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (Longitude/Latitude) — coords","text":"","code":"coords"},{"path":"https://epivec.github.io/TDLM/reference/coords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (Longitude/Latitude) — coords","text":"Longitude Longitude coordinate centroid county. Latitude Latitude coordinate centroid county.","code":""},{"path":"https://epivec.github.io/TDLM/reference/coords.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (Longitude/Latitude) — coords","text":"https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html","code":""},{"path":"https://epivec.github.io/TDLM/reference/coords_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical coordinates of US Kansas counties' centroids in 2000 (X/Y based on Web Mercator) — coords_xy","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (X/Y based on Web Mercator) — coords_xy","text":"dataset containing geographical coordinates US Kansas counties' centroids 2000 (X/Y based Web Mercator).","code":""},{"path":"https://epivec.github.io/TDLM/reference/coords_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (X/Y based on Web Mercator) — coords_xy","text":"","code":"coords_xy"},{"path":"https://epivec.github.io/TDLM/reference/coords_xy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (X/Y based on Web Mercator) — coords_xy","text":"X X coordinate centroid county. Y Y coordinate centroid county.","code":""},{"path":"https://epivec.github.io/TDLM/reference/coords_xy.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Geographical coordinates of US Kansas counties' centroids in 2000 (X/Y based on Web Mercator) — coords_xy","text":"https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html","code":""},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial distribution of US Kansas counties in 2000 — county","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"dataset containing geometry 105 US Kansas counties.","code":""},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"","code":"county"},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"ID County ID. Longitude Longitude coordinate centroid county. Latitude Latitude coordinate centroid county. Area Surface area county (square kilometers). geometry Geometry county.","code":""},{"path":"https://epivec.github.io/TDLM/reference/county.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spatial distribution of US Kansas counties in 2000 — county","text":"https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Great-circle distances between US Kansas counties — distance","title":"Great-circle distances between US Kansas counties — distance","text":"dataset containing great-circle distance (kilometers) 105 US Kansas counties.","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Great-circle distances between US Kansas counties — distance","text":"","code":"distance"},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Great-circle distances between US Kansas counties — distance","text":"matrix 105 rows 105 columns. element matrix represents distance two counties. County IDs used row names column names.","code":""},{"path":"https://epivec.github.io/TDLM/reference/distance.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Great-circle distances between US Kansas counties — distance","text":"https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distance between pairs of locations — extract_distances","title":"Compute the distance between pairs of locations — extract_distances","text":"function computes distance pairs locations based geographical coordinates.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distance between pairs of locations — extract_distances","text":"","code":"extract_distances(   coords,   method = \"Haversine\",   id = NULL,   show_progress = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distance between pairs of locations — extract_distances","text":"coords two-column matrix data.frame row represents coordinates location (see Details). method character string indicating method choose compute distances (see Details). Available options \"Haversine\" \"Euclidean\". id vector length equal number locations, used row names column names output distance matrix (optional, NULL default). show_progress boolean indicating whether progress bar displayed.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distance between pairs of locations — extract_distances","text":"square matrix representing distance (kilometers) locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the distance between pairs of locations — extract_distances","text":"coords must contain two columns: first one longitude \"X\" coordinates, second one latitude \"Y\" coordinates. \"Haversine\" method used compute great-circle distances longitude/latitude, \"Euclidean\" method used \"X/Y\" coordinates.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the distance between pairs of locations — extract_distances","text":"outputs based locations contained coords, sorted order. optional id can also provided used names outputs.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the distance between pairs of locations — extract_distances","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the distance between pairs of locations — extract_distances","text":"","code":"data(coords)  distance <- extract_distances(coords = coords,                                method = \"Haversine\",                               id = rownames(coords))"},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of opportunities between pairs of locations — extract_opportunities","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"function computes number opportunities pairs locations defined Lenormand et al. (2016). given pair locations, number opportunities origin location destination location based number opportunities within circle radius equal distance origin destination, origin location center. number opportunities origin destination locations included.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"","code":"extract_opportunities(opportunity, distance, check_names = FALSE)"},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"opportunity numeric vector representing number opportunities per location. value positive. distance squared matrix representing distances locations. check_names boolean indicating whether location IDs used vector names, matrix row names, matrix column names, whether checked (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"squared matrix element represents number opportunities pair locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"opportunity distance based number locations sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything consistent running function (check_names = FALSE default). Note function check_format_names() can used validate inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_opportunities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of opportunities between pairs of locations — extract_opportunities","text":"","code":"data(mass) data(distance)  opportunity <- mass[, 1]  sij <- extract_opportunities(opportunity = opportunity,                              distance = distance,                              check_names = FALSE)"},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract distances and surface areas from a spatial object — extract_spatial_information","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"function returns matrix distances locations (kilometers) along vector surface areas locations (square kilometers).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"","code":"extract_spatial_information(geometry, id = NULL, show_progress = FALSE)"},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"geometry spatial object can handled sf package. id name number column use rownames colnames output distance matrix (optional, NULL default). vector length equal number locations can also used. show_progress boolean indicating whether progress bar displayed.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"list composed two elements. first element square matrix representing great-circle distances (kilometers) locations. second element vector containing surface area location (square kilometers).","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"geometry must projected valid coordinate reference system. reprojected degrees longitude/latitude compute great-circle distances centroids locations using internal function compute surface area using function st_area sf package.","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"outputs based locations contained geometry sorted order. optional id can also provided used names outputs.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/extract_spatial_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract distances and surface areas from a spatial object — extract_spatial_information","text":"","code":"data(county)  res <- extract_spatial_information(county, id = \"ID\")  dim(res$distance) #> [1] 105 105  length(res$surface) #> [1] 105"},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"function returns data.frame row provides one several goodness--fit measures simulated observed Origin-Destination (OD) matrix.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"","code":"gof(   sim,   obs,   measures = \"all\",   distance = NULL,   bin_size = 2,   use_proba = FALSE,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"sim object class TDLM (output run_law_model(), run_law(), run_model()). matrix list matrices can also used (see Note). obs square matrix representing observed mobility flows. measures character vector single character string indicating goodness--fit measure(s) compute (see Details). Available options \"CPC\", \"NRMSE\", \"KL\", \"CPL\", \"CPC_d\" \"KS\". \"\" specified, measures calculated. distance square matrix representing distances locations. necessary distance-based measures. bin_size numeric value indicating size bins used discretize distance distribution computing CPC_d (default 2 kilometers). use_proba boolean indicating whether proba matrix used instead simulated OD matrix compute measure(s). valid output run_law_model() argument write_proba = TRUE (see Note). check_names boolean indicating whether location IDs used matrix rownames colnames checked consistency (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"data.frame providing one several goodness--fit measures simulated OD(s) observed OD. row corresponds matrix sorted according list (list lists) elements (names used provided).","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"Several goodness--fit measures considered, Common Part Commuters (CPC), Common Part Links (CPL), Common Part Commuters based distance (CPC_d), described Lenormand et al. (2016). also includes classical metrics Normalized Root Mean Square Error (NRMSE), Kullback–Leibler divergence (KL), Kolmogorov-Smirnov statistic p-value (KS). measures based observed simulated flow distance distributions computed using ks_test function Ecume package.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"default, sim output run_law_model(), measure(s) computed simulated OD matrices proba matrix (included output write_proba = TRUE). argument use_proba can used compute measure(s) based proba matrix instead simulated OD matrix. case, argument obs also proba matrix. inputs based number locations, sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything consistent running function (check_names = FALSE default). Note function check_format_names() can used validate inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute goodness-of-fit measures between observed and simulated OD matrices — gof","text":"","code":"data(mass) data(distance) data(od)  mi <- as.numeric(mass[, 1]) mj <- mi Oi <- as.numeric(mass[, 2]) Dj <- as.numeric(mass[, 3])  res <- run_law_model(law = \"GravExp\",                       mass_origin = mi,                       mass_destination = mj,                      distance = distance,                       opportunity = NULL,                       param = 0.01,                      model = \"DCM\",                       nb_trips = NULL,                       out_trips = Oi,                       in_trips = Dj,                      average = FALSE,                       nbrep = 1,                       maxiter = 50,                       mindiff = 0.01,                      write_proba = FALSE,                      check_names = FALSE)  gof(sim = res,      obs = od,      measures = \"CPC\",      distance = NULL,      bin_size = 2,     use_proba = FALSE,     check_names = FALSE) #>      Simulation       CPC #> 1 replication_1 0.4574863"},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"dataset containing number inhabitants, -commuters, -commuters 105 US Kansas counties 2000.","code":""},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"","code":"mass"},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"data.frame 105 rows 4 columns: rownames County ID. Population Number inhabitants. -commuters Number -commuters. -commuters Number -commuters.","code":""},{"path":"https://epivec.github.io/TDLM/reference/mass.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Population and number of out- and in-commuters by US Kansas county in 2000 — mass","text":"https://www2.census.gov/programs-surveys/decennial/tables/2000/county--county-worker-flow-files/","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":null,"dir":"Reference","previous_headings":"","what":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"dataset containing number commuters 105 US Kansas counties 2000.","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"","code":"od"},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"matrix 105 rows 105 columns. element matrix represents number commuters two counties. County IDs used row names column names.","code":""},{"path":"https://epivec.github.io/TDLM/reference/od.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Origin-Destination commuting matrix between US Kansas counties in 2000 — od","text":"https://www2.census.gov/programs-surveys/decennial/tables/2000/county--county-worker-flow-files/","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution laws — run_law","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"function estimates mobility flows using different distribution laws models. described Lenormand et al. (2016), function uses two-step approach generate mobility flows separating trip distribution law (gravity intervening opportunities) modeling approach used generate flows based law. function uses first step generate probability distribution based different laws.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"","code":"run_law(   law = \"Unif\",   mass_origin,   mass_destination = mass_origin,   distance = NULL,   opportunity = NULL,   param = NULL,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"law character indicating law use (see Details). mass_origin numeric vector representing mass origin (.e. demand). mass_destination numeric vector representing mass destination (.e. attractiveness). distance squared matrix representing distance locations (see Details). opportunity squared matrix representing number opportunities locations (see Details). Can easily computed extract_opportunities(). param numeric vector single numeric value used adjust importance distance opportunity associated chosen law. necessary original radiation law uniform law (see Details). check_names boolean indicating whether location IDs used matrix rownames colnames checked consistency (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"object class TDLM. object class TDLM. list list matrice containing parameter value matrix probabilities (called proba). length(param) = 1 law = \"Rad\" law = \"Unif\" list matrices returned.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"compute matrix proba estimating probability observe trip one location another. probability based demand (argument mass_origin) attractiveness (argument mass_destination). Note population typically used surrogate quantities (mass_destination = mass_origin default). also depends distance locations (argument distance) number opportunities locations (argument opportunity) depending chosen law. effect distance number opportunities can adjusted parameter (argument param) except original radiation law uniform law. package consider eight probabilistic laws described details Lenormand et al. (2016). Four gravity laws (Barthelemy, 2011), three intervening opportunity laws (Schneider, 1959; Simini et al., 2012; Yang et al., 2014) uniform law. Gravity law exponential distance decay function (law = \"GravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law exponential distance decay function (law = \"NGravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Gravity law power distance decay function (law = \"GravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law power distance decay function (law = \"NGravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Schneider's intervening opportunities law (law = \"Schneider\"). arguments mass_origin, mass_destination (optional), opportunity param used. Radiation law (law = \"Rad\"). arguments mass_origin, mass_destination (optional) opportunity used. Extended radiation law (law = \"RadExt\"). arguments mass_origin, mass_destination (optional), opportunity param used. Uniform law (law = \"Unif\"). argument mass_origin used extract number locations.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"inputs based number locations, sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything consistent running function (check_names = FALSE default). Note function check_format_names() can used validate inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"Barthelemy M (2011). Spatial Networks. Physics Reports 499, 1-101. Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169. Schneider M (1959) Gravity models trip distribution theory. Papers regional science association 5, 51-58. Simini F, González MC, Maritan & Barabási (2012) universal model mobility migration patterns. Nature 484, 96-100. Yang Y, Herrera C, Eagle N & González MC (2014) Limits Predictability Commuting Flows Absence Data Calibration. Scientific Reports 4, 5662.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution laws — run_law","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) mj <- mi  res <- run_law(   law = \"GravExp\", mass_origin = mi, mass_destination = mj,   distance = distance, opportunity = NULL, param = 0.01,   check_names = FALSE )  # print(res)"},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"function estimates mobility flows using different distribution laws models. described Lenormand et al. (2016), function uses two-step approach generate mobility flows separating trip distribution law (gravity intervening opportunities) modeling approach used generate flows based law.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"","code":"run_law_model(   law = \"Unif\",   mass_origin,   mass_destination = mass_origin,   distance = NULL,   opportunity = NULL,   param = NULL,   model = \"UM\",   nb_trips = 1000,   out_trips = NULL,   in_trips = out_trips,   average = FALSE,   nbrep = 3,   maxiter = 50,   mindiff = 0.01,   write_proba = FALSE,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"law character indicating law use (see Details). mass_origin numeric vector representing mass origin (.e. demand). mass_destination numeric vector representing mass destination (.e. attractiveness). distance squared matrix representing distance locations (see Details). opportunity squared matrix representing number opportunities locations (see Details). Can easily computed extract_opportunities(). param numeric vector single numeric value used adjust importance distance opportunity associated chosen law. necessary original radiation law uniform law (see Details). model character indicating model use. nb_trips numeric value indicating total number trips. Must integer average = FALSE (see Details). out_trips numeric vector representing number outgoing trips per location. Must vector integers average = FALSE (see Details). in_trips numeric vector representing number incoming trips per location. Must vector integers average = FALSE (see Details). average boolean indicating average mobility flow matrix generated instead nbrep matrices based random draws (see Details). nbrep integer indicating number replications associated model run. Note nbrep = 1 average = TRUE (see Details). maxiter integer indicating maximal number iterations adjusting Doubly Constrained Model (see Details). mindiff numeric strictly positive value indicating stopping criterion adjusting Doubly Constrained Model (see Details). write_proba boolean indicating estimation probability move one location another obtained distribution law returned along flow estimations. check_names boolean indicating whether location IDs used matrix rownames colnames checked consistency (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"object class TDLM. list list matrices containing parameter value nbrep simulated matrices matrix probabilities (called proba) write_proba = TRUE. length(param) = 1 law = \"Rad\" law = \"Unif\" list matrices returned.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"First, compute matrix proba estimating probability observe trip one location another. probability based demand (argument mass_origin) attractiveness (argument mass_destination). Note population typically used surrogate quantities (mass_destination = mass_origin default). also depends distance locations (argument distance) number opportunities locations (argument opportunity) depending chosen law. effect distance number opportunities can adjusted parameter (argument param) except original radiation law uniform law. package consider eight probabilistic laws described details Lenormand et al. (2016). Four gravity laws (Barthelemy, 2011), three intervening opportunity laws (Schneider, 1959; Simini et al., 2012; Yang et al., 2014) uniform law. Gravity law exponential distance decay function (law = \"GravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law exponential distance decay function (law = \"NGravExp\"). arguments mass_origin, mass_destination (optional), distance param used. Gravity law power distance decay function (law = \"GravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Normalized gravity law power distance decay function (law = \"NGravPow\"). arguments mass_origin, mass_destination (optional), distance param used. Schneider's intervening opportunities law (law = \"Schneider\"). arguments mass_origin, mass_destination (optional), opportunity param used. Radiation law (law = \"Rad\"). arguments mass_origin, mass_destination (optional) opportunity used. Extended radiation law (law = \"RadExt\"). arguments mass_origin, mass_destination (optional), opportunity param used. Uniform law (law = \"Unif\"). argument mass_origin used extract number locations. Second, propose four constrained models generate flows distribution probability described Lenromand et al. (2016). models respect different level constraints. constraints can preserve total number trips (argument nb_trips) number -going trips (argument out_trips) /number -coming (argument in_trips) according model. sum -going trips equal sum -coming trips. Unconstrained model (model = \"UM\"). nb_trips preserved (arguments out_trips in_trips used). Production constrained model (model = \"PCM\"). out_trips preserved (arguments nb_trips in_trips used). Attraction constrained model (model = \"ACM\"). in_trips preserved (arguments nb_trips out_trips used). Doubly constrained model (model = \"DCM\"). out_trips in_trips preserved (arguments nb_tripswill used). doubly constrained model based Iterative Proportional Fitting process (Deming & Stephan, 1940). arguments maxiter (50 default) mindiff (0.01 default) can used tune model. mindiff minimal tolerated relative error simulated observed marginals. maxiter ensures algorithm stops even converged toward mindiff wanted value. default, average = FALSE, nbrep matrices generated proba multinomial random draws take different forms according model used. case, models deal positive integers inputs outputs. Nevertheless, also possible generate average matrix based multinomial distribution (based infinite number drawings). case, models' inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"inputs based number locations, sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything consistent running function (check_names = FALSE default). Note function check_format_names() can used validate inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"Barthelemy M (2011). Spatial Networks. Physics Reports 499, 1-101. Deming & Stephan FF (1940) Least Squares Adjustment Sample Frequency Table Expected Marginal Totals Known. Annals Mathematical Statistics 11, 427-444. Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169. Schneider M (1959) Gravity models trip distribution theory. Papers regional science association 5, 51-58. Simini F, González MC, Maritan & Barabási (2012) universal model mobility migration patterns. Nature 484, 96-100. Yang Y, Herrera C, Eagle N & González MC (2014) Limits Predictability Commuting Flows Absence Data Calibration. Scientific Reports 4, 5662.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_law_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution laws and models — run_law_model","text":"","code":"data(mass) data(distance)  mi <- as.numeric(mass[, 1]) mj <- mi N <- 1000  res <- run_law_model(law = \"GravExp\",                      mass_origin = mi,                       mass_destination = mj,                      distance = distance,                       opportunity = NULL,                       param = 0.01,                      model = \"UM\",                       nb_trips = N,                      out_trips = NULL,                       in_trips = NULL,                      average = TRUE,                       nbrep = 2,                       maxiter = 50,                       mindiff = 0.01,                      write_proba = FALSE,                      check_names = FALSE)  print(res) #>        Argument       Value #> 1           Law     GravExp #> 2         Model          UM #> 3 #Replications 1 (average) #> 4   #Parameters           1 #> 5     Parameter        0.01"},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mobility flows based on different trip distribution models — run_model","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"function estimates mobility flows using different distribution laws models. described Lenormand et al. (2016), function uses two-step approach generate mobility flows separating trip distribution law (gravity intervening opportunities) modeling approach used generate flows based law. function uses second step generate mobility flow based matrix probabilities using different models.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"","code":"run_model(   proba,   model = \"UM\",   nb_trips = 1000,   out_trips = NULL,   in_trips = out_trips,   average = FALSE,   nbrep = 3,   maxiter = 50,   mindiff = 0.01,   check_names = FALSE )"},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"proba squared matrix probability. sum matrix element must equal 1. normalized automatically case. model character indicating model use. nb_trips numeric value indicating total number trips. Must integer average = FALSE (see Details). out_trips numeric vector representing number outgoing trips per location. Must vector integers average = FALSE (see Details). in_trips numeric vector representing number incoming trips per location. Must vector integers average = FALSE (see Details). average boolean indicating average mobility flow matrix generated instead nbrep matrices based random draws (see Details). nbrep integer indicating number replications associated model run. Note nbrep = 1 average = TRUE (see Details). maxiter integer indicating maximal number iterations adjusting Doubly Constrained Model (see Details). mindiff numeric strictly positive value indicating stopping criterion adjusting Doubly Constrained Model (see Details). check_names boolean indicating whether location IDs used matrix rownames colnames checked consistency (see Note).","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"object class TDLM. list matrices containing nbrep simulated matrices.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"propose four constrained models generate flows distribution probability described Lenromand et al. (2016). models respect different level constraints. constraints can preserve total number trips (argument nb_trips) number -going trips (argument out_trips) /number -coming (argument in_trips) according model. sum -going trips equal sum -coming trips. Unconstrained model (model = \"UM\"). nb_trips preserved (arguments out_trips in_trips used). Production constrained model (model = \"PCM\"). out_trips preserved (arguments nb_trips in_trips used). Attraction constrained model (model = \"ACM\"). in_trips preserved (arguments nb_trips out_trips used). Doubly constrained model (model = \"DCM\"). out_trips in_trips preserved (arguments nb_tripswill used). doubly constrained model based Iterative Proportional Fitting process (Deming & Stephan, 1940). arguments maxiter (50 default) mindiff (0.01 default) can used tune model. mindiff minimal tolerated relative error simulated observed marginals. maxiter ensures algorithm stops even converged toward mindiff wanted value. default, average = FALSE, nbrep matrices generated proba multinomial random draws take different forms according model used. case, models deal positive integers inputs outputs. Nevertheless, also possible generate average matrix based multinomial distribution (based infinite number drawings). case, models' inputs can either positive integer real numbers output (nbrep = 1 case) matrix positive real numbers.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"inputs based number locations, sorted order. recommended use location ID matrix rownames matrix colnames set check_names = TRUE verify everything consistent running function (check_names = FALSE default). Note function check_format_names() can used validate inputs running main package's functions.","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"Deming & Stephan FF (1940) Least Squares Adjustment Sample Frequency Table Expected Marginal Totals Known. Annals Mathematical Statistics 11, 427-444. Lenormand M, Bassolas , Ramasco JJ (2016) Systematic comparison trip distribution laws models. Journal Transport Geography 51, 158-169.","code":""},{"path":[]},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"Maxime Lenormand (maxime.lenormand@inrae.fr)","code":""},{"path":"https://epivec.github.io/TDLM/reference/run_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mobility flows based on different trip distribution models — run_model","text":"","code":"data(mass) data(od)  proba <- od / sum(od)  Oi <- as.numeric(mass[, 2]) Dj <- as.numeric(mass[, 3])  res <- run_model(   proba = proba,   model = \"DCM\", nb_trips = NULL, out_trips = Oi, in_trips = Dj,   average = FALSE, nbrep = 3, maxiter = 50, mindiff = 0.01,   check_names = FALSE )  # print(res)"},{"path":"https://epivec.github.io/TDLM/news/index.html","id":"tdlm-1119000","dir":"Changelog","previous_headings":"","what":"TDLM 1.1.1.9000","title":"TDLM 1.1.1.9000","text":"list changes made development/GitHub version package TDLM 1.1.1 (CRAN release 2025-03-06) next CRAN release.","code":""},{"path":"https://epivec.github.io/TDLM/news/index.html","id":"tdlm-111","dir":"Changelog","previous_headings":"","what":"TDLM 1.1.1","title":"TDLM 1.1.1","text":"list changes made TDLM 1.1.0 (CRAN release 2025-0107) TDLM 1.1.1 (CRAN release 2025-03-06). Added error messages related Java dependency.","code":""},{"path":"https://epivec.github.io/TDLM/news/index.html","id":"tdlm-110","dir":"Changelog","previous_headings":"","what":"TDLM 1.1.0","title":"TDLM 1.1.0","text":"list changes made TDLM 1.0.0 (CRAN release 2023-12-19) TDLM 1.1.0 (CRAN release 2025-01-07). Added function extract_distances() compute distances geographical coordinates. Updated documentation vignette. Updated tests.","code":""},{"path":"https://epivec.github.io/TDLM/news/index.html","id":"tdlm-100","dir":"Changelog","previous_headings":"","what":"TDLM 1.0.0","title":"TDLM 1.0.0","text":"list changes made TDLM 0.1.0 (CRAN release 2023-03-18) TDLM 1.0.0 (CRAN release 2023-12-19). Added automated tests (testthat + covr). Fixed bug extract_spatial_information() (reported @Pachka, #1). Optimized extract_spatial_information() significantly improved performance distance computation (idea proposed @Pachka). Updated method identifying package folder path extract_opportunities(), run_law_model(), run_law(), run_model() (issue identified @Pachka).","code":""},{"path":"https://epivec.github.io/TDLM/news/index.html","id":"tdlm-010","dir":"Changelog","previous_headings":"","what":"TDLM 0.1.0","title":"TDLM 0.1.0","text":"First release CRAN.","code":""}]
